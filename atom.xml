<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ian's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ianwith.github.io/"/>
  <updated>2015-03-23T11:07:39.143Z</updated>
  <id>http://ianwith.github.io/</id>
  
  <author>
    <name><![CDATA[Ian Gong]]></name>
    <email><![CDATA[iangong@foxmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[春苗项目小结之deviceBridge的进化之路]]></title>
    <link href="http://ianwith.github.io/2015/03/04/chunmiao-summary-evolution-of-deviceBridge/"/>
    <id>http://ianwith.github.io/2015/03/04/chunmiao-summary-evolution-of-deviceBridge/</id>
    <published>2015-03-04T06:03:46.000Z</published>
    <updated>2015-03-23T08:12:51.000Z</updated>
    <content type="html"><![CDATA[<p>deviceBridge是我们连接WebView页面与Native App的桥梁，它实现了JS和NativeCode之间的相互通信。春苗移动端App是一个HybridApp，内嵌了Wap版的帖子详情页面，其中包含的许多功能逻辑需要和NA协作共同完成，这就需要一套完备的交互接口。为了说明deviceBridge的工作原理，我们挑选一个最复杂的需求“回复”来理一理整个流程。所谓一通百通，跑通了一个功能，其他的也就迎刃而解了。</p>
<p><img src="/img/chunmiao-summary-evolution-of-deviceBridge/reply_flow.png" alt="回复流程" style="width:882px"></p>
<p>这里主要来看前端JS的接口部分，Native端的处理代码就暂时忽略了。下面我就说说在编写这个JS脚本时候我的学习和优化过程。<br><a id="more"></a></p>
<h2 id="第一版">第一版</h2>
<p>我们做了个简单的demo以确定NA与JS双方的交互方式。虽然了解到Android中addJavascriptInterface可以将接口注入到JS中，但是这种方式并不安全。所以我们采用伪协议的方式来实现相互间的通信。最开始的时候是这么做的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.deviceBridge = {};</div><div class="line"></div><div class="line">deviceBridge = {</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发起请求</div><div class="line">     */</div><div class="line">    _doRequest: <span class="function"><span class="keyword">function</span> <span class="params">(action, args)</span> </span>{</div><div class="line">        <span class="keyword">var</span> reqData = {</div><div class="line">            action: action,</div><div class="line">            args: args</div><div class="line">        };</div><div class="line">        <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发起回复，NA调起回复框和键盘</div><div class="line">     */</div><div class="line">    causeReply: <span class="function"><span class="keyword">function</span> <span class="params">(params)</span> </span>{</div><div class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY'</span>;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(params);</div><div class="line">        <span class="keyword">this</span>._doRequest(action, args);</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向服务器发送回复</div><div class="line">     */</div><div class="line">    sendComment: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>{</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(res);</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            <span class="comment">// request server api</span></div><div class="line">            <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args);</div><div class="line">        } <span class="keyword">catch</span>(e) {}</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 回复结果状态通知NA</div><div class="line">     */</div><div class="line">    replyStatus: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>{</div><div class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY_RESULT'</span>;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(res.status);</div><div class="line">        <span class="keyword">this</span>._doRequest(action, args);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个版本只是实现了基本的接收发送消息的功能，它留下了很多问题：各个方法独立调用，流程没有有效衔接起来。当有多次请求时，无法辨别对应的哪个响应。</p>
<h2 id="第二版">第二版</h2>
<p>加入回调逻辑，并为每个回调生成唯一标识的ID，防止流程混乱。iOS和Android采用不同的通信方式：Android利用prompt方式传参，消息可以被Java端WebChromeClient.onJsPrompt拦截到；iOS由于无法拦截prompt，继续采用伪协议通信。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.deviceBridge = {};</div><div class="line"></div><div class="line">deviceBridge = {</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生成唯一的编号</div><div class="line">     */</div><div class="line">    getReqID: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="string">'_bd_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化回调函数</div><div class="line">     */</div><div class="line">    initCallback: <span class="function"><span class="keyword">function</span><span class="params">(callback, nReqID)</span> </span>{</div><div class="line">        callbackMethodName = <span class="string">'callbackjs'</span> + nReqID;</div><div class="line">        <span class="built_in">window</span>[callbackMethodName] = <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>{</div><div class="line">            <span class="built_in">window</span>[callbackMethodName] = <span class="literal">null</span>;</div><div class="line">            callback(res);</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始请求，分别采用不同的通信方式</div><div class="line">     */</div><div class="line">    _sendRequest: <span class="function"><span class="keyword">function</span> <span class="params">(action, args, callbackMethodName)</span> </span>{</div><div class="line">        <span class="keyword">var</span> isAndroid = <span class="regexp">/Android/</span>.test(navigator.userAgent);</div><div class="line">        <span class="keyword">var</span> reqData = {</div><div class="line">            action: action,</div><div class="line">            args: args</div><div class="line">        };</div><div class="line">        <span class="keyword">if</span> (isAndroid) {</div><div class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) {</div><div class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData), <span class="string">"javascript:"</span> + callbackMethodName + <span class="string">"('%1$s')"</span>);</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span> {</div><div class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData));</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) {</div><div class="line">                reqData.callback = callbackMethodName;</div><div class="line">            }</div><div class="line">            <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送请求入口</div><div class="line">     */</div><div class="line">    _doRequest: <span class="function"><span class="keyword">function</span> <span class="params">(action, args, callback)</span> </span>{</div><div class="line">        <span class="keyword">var</span> nReqID = <span class="keyword">this</span>.getReqID();</div><div class="line">        <span class="keyword">if</span> (callback) {</div><div class="line">            <span class="keyword">this</span>.initCallback(callback, nReqID);</div><div class="line">            <span class="keyword">this</span>._sendRequest(action, args, callbackMethodName);</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">this</span>._sendRequest(action, args);</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发起回复</div><div class="line">     */</div><div class="line">    causeReply: <span class="function"><span class="keyword">function</span> <span class="params">(params)</span> </span>{</div><div class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY'</span>;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(params);</div><div class="line">        <span class="keyword">this</span>._doRequest(action, args, <span class="keyword">this</span>.sendComment);</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向服务器发送回复</div><div class="line">     */</div><div class="line">    sendComment: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>{</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(res);</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            <span class="comment">// request server api</span></div><div class="line">            <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args);</div><div class="line">        } <span class="keyword">catch</span>(e) {}</div><div class="line">    },</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 回复结果状态</div><div class="line">     */</div><div class="line">    replyStatus: <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> </span>{</div><div class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY_RESULT'</span>;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(res.status);</div><div class="line">        <span class="keyword">this</span>._doRequest(action, args);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>所以我们可以这么用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 页面事件</div><div class="line"> */</div><div class="line"><span class="keyword">new</span> TapEvents({</div><div class="line">    container: $(<span class="string">'#pages-container'</span>),</div><div class="line">    preventDefault: <span class="literal">false</span>,</div><div class="line">    bind: {</div><div class="line">        <span class="string">'reply'</span>: <span class="function"><span class="keyword">function</span> <span class="params">(target)</span> </span>{</div><div class="line">            <span class="keyword">if</span> (isNa) {</div><div class="line">                deviceBridge.causeReply({</div><div class="line">                    <span class="string">'parent_id'</span>: target.attr(<span class="string">'data-id'</span>), </div><div class="line">                    <span class="string">'parent_user'</span>: target.attr(<span class="string">'data-parent-name'</span>)</div><div class="line">                });</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">});</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发起后端数据API请求方法</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> send_reply = <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>{</div><div class="line">    $.ajax({</div><div class="line">        url: <span class="string">'/api/reply'</span>,</div><div class="line">        data: data,</div><div class="line">        type: <span class="string">'post'</span></div><div class="line">    }).done(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</div><div class="line">        deviceBridge.replyStatus(data);</div><div class="line">    });</div><div class="line">};</div></pre></td></tr></table></figure>

<p>整个流程的时序图大致是这样的：</p>
<p><img src="/img/chunmiao-summary-evolution-of-deviceBridge/method_sequence.png" alt="时序图" style="width:882px"></p>
<p>在换用prompt的时候，我们踩到一个坑，Android只能收到一次消息，后面的消息再也无法接收。这里要提醒的是，Android端别忘了confirm，不然就会阻塞了。</p>
<h2 id="第三版">第三版</h2>
<p>添加全流程标识ID；加入命名空间，统一构建所有API方法；支持新需求：在NA端直接触发回复，回复框输入，之后将回复内容塞给JS。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> isAndroid = <span class="regexp">/Android/</span>.test(navigator.userAgent);</div><div class="line">    <span class="keyword">var</span> callbackMethodName = <span class="literal">null</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 与NA约定的Action名称</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> cmdMap = {</div><div class="line">        causeReply: <span class="string">"REPLY"</span>,</div><div class="line">        replyStatus: <span class="string">"REPLY_RESULT"</span>,</div><div class="line">        sendComment: <span class="string">"SEND"</span></div><div class="line">    };</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 接口池</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> cmdPool = {</div><div class="line">        <span class="string">"deviceBridge.device.causeReply"</span>: <span class="function"><span class="keyword">function</span> <span class="params">(action, params)</span> </span>{</div><div class="line">            doRequest(action, params, deviceBridge.call.sendComment);</div><div class="line">        },</div><div class="line">        <span class="string">"deviceBridge.call.sendComment"</span>: <span class="function"><span class="keyword">function</span> <span class="params">(action, params)</span> </span>{</div><div class="line">            <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(params);</div><div class="line">            <span class="keyword">if</span> (!args.actionID) {</div><div class="line">                <span class="comment">// 如果是NA直接触发回复</span></div><div class="line">                args.actionID = getReqID();</div><div class="line">            }</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args); <span class="comment">// request server api</span></div><div class="line">            } <span class="keyword">catch</span>(e) {}</div><div class="line">        },</div><div class="line">        <span class="string">"deviceBridge.result.replyStatus"</span>: <span class="function"><span class="keyword">function</span> <span class="params">(action, params)</span> </span>{</div><div class="line">            doRequest(action, params);</div><div class="line">        }</div><div class="line">    };</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getReqID</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="string">'_bd_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initCallback</span> <span class="params">(callback, nReqID)</span> </span>{</div><div class="line">        callbackMethodName = <span class="string">'callbackjs'</span> + nReqID;</div><div class="line">        <span class="built_in">window</span>[callbackMethodName] = <span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>{</div><div class="line">            <span class="built_in">window</span>[callbackMethodName] = <span class="literal">null</span>;</div><div class="line">            callback(res);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendRequest</span> <span class="params">(action, nReqID, args, callbackMethodName)</span> </span>{</div><div class="line">        <span class="keyword">var</span> reqData = {</div><div class="line">            action: action,</div><div class="line">            actionID: nReqID,</div><div class="line">            args: args</div><div class="line">        };</div><div class="line">        <span class="keyword">if</span> (isAndroid) {</div><div class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) {</div><div class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData), <span class="string">"javascript:"</span> + callbackMethodName + <span class="string">"('%1$s')"</span>);</div><div class="line">            }</div><div class="line">            <span class="keyword">else</span> {</div><div class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData));</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) {</div><div class="line">                reqData.callback = callbackMethodName;</div><div class="line">            }</div><div class="line">            <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doRequest</span> <span class="params">(action, args, callback)</span> </span>{</div><div class="line">        <span class="keyword">var</span> nReqID = getReqID();</div><div class="line">        <span class="keyword">if</span> (callback) {</div><div class="line">            initCallback(callback, nReqID);</div><div class="line">            sendRequest(action, nReqID, args, callbackMethodName);</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> {</div><div class="line">            sendRequest(action, nReqID, args);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册命名空间</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ns</span> <span class="params">(namespace, owner)</span> </span>{</div><div class="line">        <span class="keyword">var</span> names = namespace.split(<span class="string">"."</span>);</div><div class="line">        owner = owner || <span class="built_in">window</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++) {</div><div class="line">            <span class="keyword">var</span> packageName = names[i];</div><div class="line">            owner[packageName] = owner[packageName] || {};</div><div class="line">            owner = owner[packageName];</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> owner;</div><div class="line">    }</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 固化参数Action名</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">currying</span> <span class="params">(fn, cmd)</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">var</span> args = [cmd];</div><div class="line">            args.push.apply(args, <span class="built_in">arguments</span>);</div><div class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生成方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bindFn</span> <span class="params">(cmdStr, fn)</span> </span>{</div><div class="line">        <span class="keyword">var</span> parts = cmdStr.split(<span class="string">"."</span>);</div><div class="line">        <span class="keyword">var</span> method = parts.pop();</div><div class="line">        <span class="keyword">var</span> prefix = parts.join(<span class="string">"."</span>);</div><div class="line">        <span class="keyword">var</span> namespace = ns(prefix);</div><div class="line">        namespace[method] = currying(fn, cmdMap[method]);</div><div class="line">    }</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构建接口</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">buildInterface</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cmdPool) {</div><div class="line">            bindFn(key, cmdPool[key]);</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    buildInterface();</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>我们在向服务器发送数据请求的时候，也需要记住当前流程的ID</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> send_reply = <span class="function"><span class="keyword">function</span> <span class="params">(params)</span> </span>{</div><div class="line">    <span class="keyword">var</span> actionID = params.actionID;</div><div class="line">    <span class="keyword">var</span> data = params.data;</div><div class="line">    $.ajax({</div><div class="line">        url: <span class="string">'/api/reply'</span>,</div><div class="line">        data: data,</div><div class="line">        type: <span class="string">'post'</span></div><div class="line">    }).done(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</div><div class="line">        <span class="keyword">var</span> res = <span class="built_in">JSON</span>.stringify({</div><div class="line">            actionID: actionID,</div><div class="line">            status: data.status</div><div class="line">        });</div><div class="line">        deviceBridge.result.replyStatus(res);</div><div class="line">    });</div><div class="line">};</div></pre></td></tr></table></figure>

<h2 id="后续优化">后续优化</h2>
<ol>
<li>优化回调函数，采用dispatch方法统一分发响应。</li>
<li>添加错误处理机制。</li>
<li>增加调试模式，方便前端在浏览器调试代码。<br>…</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>deviceBridge是我们连接WebView页面与Native App的桥梁，它实现了JS和NativeCode之间的相互通信。春苗移动端App是一个HybridApp，内嵌了Wap版的帖子详情页面，其中包含的许多功能逻辑需要和NA协作共同完成，这就需要一套完备的交互接口。为了说明deviceBridge的工作原理，我们挑选一个最复杂的需求“回复”来理一理整个流程。所谓一通百通，跑通了一个功能，其他的也就迎刃而解了。</p>
<p><img src="/img/chunmiao-summary-evolution-of-deviceBridge/reply_flow.png" alt="回复流程" style="width:882px"></p>
<p>这里主要来看前端JS的接口部分，Native端的处理代码就暂时忽略了。下面我就说说在编写这个JS脚本时候我的学习和优化过程。<br>]]>
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="js" scheme="http://ianwith.github.io/tags/js/"/>
    
      <category term="native" scheme="http://ianwith.github.io/tags/native/"/>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[春苗项目小结之合作沟通篇]]></title>
    <link href="http://ianwith.github.io/2015/02/22/chunmiao-summary-cooperation/"/>
    <id>http://ianwith.github.io/2015/02/22/chunmiao-summary-cooperation/</id>
    <published>2015-02-22T12:58:53.000Z</published>
    <updated>2015-03-23T08:12:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="和UE沟通">和UE沟通</h2>
<p>在文库做两个项目过程中，都有被UE劈头痛批的经历，这是我在之前从未体验过的。我想了一下，出现这种沟通问题的原因在以下两个方面：</p>
<ol>
<li><p><strong>工作性质</strong>：这个要拿我之前在广研的经历来比较了，由于之前在邮箱做的是重构工作，和设计师走的很近，像是相亲相爱的一家人，从来没出现过这种问题。而现在不同了，我们FE是属于研发联盟，这意味着，做事的方式和流程都会有很大的不同。<br>具体一点说：做重构，我们和设计师直接沟通，（几乎）随时沟通，我们甚至可以跟设计师提出自己对某个设计的看法。而做研发，有两个重要的不同点，一是<strong>过程</strong>：开发之前，一份设计稿定稿并标注明了；开发之后上线之前，反馈UE走查确认效果；开发过程中，UE不会全程跟着你改。二是<strong>方式</strong>：UE不直接跟工程师沟通，而由PM充当中间人的角色。开发时发现缺什么图了，跟PM说，PM找UE补；交互设计有矛盾了，UE找PM确认，PM确认无误再给研发。少数情况下，页面中细小的细节，UE可以和研发直接沟通。  </p>
<a id="more"></a>
</li>
<li><p><strong>UI规范和细节标注</strong>：首先讲UI规范，指的就是项目的设计规范：主要链接什么颜色，辅助链接什么颜色，整站字体系列，以及色彩系统，品牌色系等。其实文库有设计规范，只是我之前对这个并不知情，为了确认一个效果还跑去问UE，结果UE就嫌烦了。<br>其次是细节标注的缺失，比如对页面元素的间距，字号等一些细节的标注。通常我们做完页面丢给UE，UE总会觉得这里字号不对啊，那里间距不对啊！可是我明明是对着psd量的啊，你又没给标注！UE就生气了，你要标注提前说嘛，怎么做这么烂了再丢过来！所以标注这事得一开始就当规范去实行。</p>
</li>
</ol>
<p>当然，沟通的问题，我觉得很多时候需要双方共同努力来解决的，我这里就从我的角度，反思我的过错，分析解决方案，谈谈我今后该做的事。</p>
<ol>
<li><p><strong>转变角色</strong>：上面说到了两种工作方式，且不说哪种效率更高，因为不同的部门，不同的产品是会有差异的。所以这里只提针对性的解决方案，首先是我要转变角色，适应开发流程，尽量做到，拿着明明白白的图开发，调完所有效果所有浏览器，一再确认百分百还原后，再给UE过效果。这是我之前没有做到的，拿了一份半完成状态，未接入数据的页面请UE确认，那UE哪知道是数据的问题，他一看页面跟设计出入太大，自然就不爽了。设计师产出的是一份设计稿，下一个阶段这份稿子将转变成实际的页面，我们作为工程师，认真对待每一份设计稿，既是对上游工作的尊重，也是对产品负责的表现。</p>
</li>
<li><p><strong>建立完整的设计规范</strong>。这是针对第二点需要做的事。UI规范，为什么这个很重要呢，是因为这可以在减少不必要的沟通成本，加快研发速度。有了规范不是终点，大家都认同规范的重要性，照着规范去做才是我们要达到的目的。这里我需要检讨下。<br>另外就是标注好必要的细节，这是为了页面设计细节在UI规范里找不到答案的情况下，工程师也能顺利的对着设计稿写样式，省去多余的取色，量间距的环节。而且这事也需要放到流程规范里去完善，如果有详尽的标注文件，交付开发，那最后出现偏差，就有证据说明是谁的问题了。</p>
</li>
</ol>
<h2 id="和QA沟通">和QA沟通</h2>
<p>在春苗测试的过程中，我们需要频繁的接受测试给的反馈。这次的项目我感觉总体来讲和QA同学合作比较愉快，但是也有些注意事项需要记录。</p>
<ol>
<li><p><strong>细读MRD</strong>。MRD即需求管理文档，这份文档会详细的描述产品的细节。通常来讲，对于一个前端页面，文档会对页面的不同区块分别展开描述，比如具体的交互效果描述，极端情况下（如没有数据，数据溢出）的展现。一般来说QA会根据这份文档比对各种情况的不同效果。<br>我在开发的过程中，犯的一个错误就是只看设计稿而没看MRD，设计稿往往只是确定页面在标准情况下的样子，而页面最终在不同用户手中会有各种不同的展现，举例来说，譬如没有登录，那么用户信息区块只显示足迹；如果没发表帖子，那么主页帖子页面也不能空空如也，如果是管理员，那么可能有额外的操作按钮。设计稿往往不能将这些情况全部考虑到，这就需要我们从MRD里找。这就避免测试阶段，QA发现各种我们没考虑到的问题。</p>
</li>
<li><p><strong>定好时间当面过bug</strong>。进入测试的环节中，QA会把bug记录到相关项目的需求平台中，比如我们使用icafe系统，这样很方便管理，修复好了的bug只要在系统中改一下状态，交给测试去回归。但是当bug增加到几十个甚至更多以后，可能就会有混乱的情况出现，这就需要定期定时间当面沟通了。<br>比如今天处理了10个bug，约定下午四点，大家当面过一遍。那么这一次沟通的重点是：一，核对处理的前10个bug，标注哪些是较难解决的，哪些是服务器端RD需要去修的，其余的状态改为“待测试”并由QA稍后回归；二，浏览待修复的后10个bug，哪些是无法复现的，哪些是有矛盾需要PM确认效果的，以及预估解决这些问题需要的时间。</p>
</li>
<li><p><strong>转换语言</strong>。这里指的是当QA跟你讲述，或向你询问一个问题可能的原因时，用尽量通俗的语言描述实现的环节是怎样的，最终应该是怎样的，而不该是怎样的。有的时候QA可能会武断的给一个bug的产生下结论，他看不到代码实现的复杂流程是怎样的，不知道这个bug和其他bug的相关性。当我们解释的时候，千万不能带有炫耀的想法拖长沟通的内容，简单明了为佳。<br>其实这一点讲的是和测试同学交流的一些技巧，我倒还是很乐意为测试同学解释问题的。记得有次QA跑来说他那边node服务挂了，我这边跑的好好的啊，查了半天代码也没问题啊。作为开发要尽责嘛，协助QA一起追查原因，最后定位到QA造数据时写的php代码的问题，导致传给node的数据格式不对了。这虽然是QA对代码的理解错误导致的，但找到原因前谁也不知道原因的，这就需要耐心沟通，乐意协助，逐步排除了。</p>
</li>
</ol>
<h2 id="和PM沟通">和PM沟通</h2>
<p>这次我参与的项目中和PM的沟通都挺顺畅的，可能是我参与进来较晚，没有完全参加前期的需求评审的缘故。所以对于这一点我体会并没有那么深，但组内同学有经历过一些问题，并且对此开过研讨会议，所以觉得有必要把会议记录贴上来。</p>
<pre>
理想的H5&NA项目流程

###一般项目
需求评审
测试排期

###需求确认阶段
需求评审  走心!!!
需求反诉  多参与进去

###设计排期阶段
FE到底算什么
承担一样的压力，为何不承担一样的权利?

###研发阶段
人总是习惯做自己最擅长的事情
视觉  提前确定需求
接口
子项目  项目负责人(接口问题, 优先确定, 需求文档, checkList)

###面对其他问题
干扰  …

###临上线阶段
deadline
问题提早暴露  上线通报和PM确定
为什么大事都是最后出
视觉走查放在最后吗?  上线前两三天完成
项目排期较长的时候要及时up代码

###上线后
开放式提问  (不要问是非性问题，what性问题)
承揽拭回答

###问题反馈(check)
</pre>

<p>觉得其中最有体会的是需求评审的时候需要“<strong>走心</strong>”，多参与进去，这是我一直做的不好的地方。当PM在解释需求的时候，我一言不发，就不可能真正理解需求的设计，在开发过程中就会遇到问题。只有多想，多发问，才能掌握具体的设计细节，PM也能评估出可行性。<br>还有就是<strong>临上线</strong>阶段，前面第一部分已经描述过，我在视觉走查阶段吃的亏。其实这个问题换个角度，放到更大的范围讨论，就是要把握deadline这个点。我们安排工作的时候，不要眼盯着deadline去做，而需要给自己定一个稍提前于deadline的时间点，这样就留下一个缓冲的时间段，便于让问题提早暴露，顺利解决而不拖延最后的上线。<br>上线后还有一点需要补充的是，我们要有<strong>责任意识</strong>。前端工程师不该只是把页面扔上线就觉得完成任务了，我们需要像运维工程师那样时时关注线上问题，及时处理和规避风险。这点扩展开来还有很多，就不属于和PM沟通的范畴了。目前就这么多啦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="和UE沟通">和UE沟通</h2>
<p>在文库做两个项目过程中，都有被UE劈头痛批的经历，这是我在之前从未体验过的。我想了一下，出现这种沟通问题的原因在以下两个方面：</p>
<ol>
<li><p><strong>工作性质</strong>：这个要拿我之前在广研的经历来比较了，由于之前在邮箱做的是重构工作，和设计师走的很近，像是相亲相爱的一家人，从来没出现过这种问题。而现在不同了，我们FE是属于研发联盟，这意味着，做事的方式和流程都会有很大的不同。<br>具体一点说：做重构，我们和设计师直接沟通，（几乎）随时沟通，我们甚至可以跟设计师提出自己对某个设计的看法。而做研发，有两个重要的不同点，一是<strong>过程</strong>：开发之前，一份设计稿定稿并标注明了；开发之后上线之前，反馈UE走查确认效果；开发过程中，UE不会全程跟着你改。二是<strong>方式</strong>：UE不直接跟工程师沟通，而由PM充当中间人的角色。开发时发现缺什么图了，跟PM说，PM找UE补；交互设计有矛盾了，UE找PM确认，PM确认无误再给研发。少数情况下，页面中细小的细节，UE可以和研发直接沟通。  </p>
]]>
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="experience" scheme="http://ianwith.github.io/tags/experience/"/>
    
      <category term="cooperation" scheme="http://ianwith.github.io/tags/cooperation/"/>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[春苗项目小结之模块化与组件化]]></title>
    <link href="http://ianwith.github.io/2015/02/16/chunmiao-summary-modularization/"/>
    <id>http://ianwith.github.io/2015/02/16/chunmiao-summary-modularization/</id>
    <published>2015-02-16T06:00:34.000Z</published>
    <updated>2015-03-23T08:12:51.000Z</updated>
    <content type="html"><![CDATA[<p>这一篇想来整理总结一下春苗项目使用的前端框架及其模块化的思想。这次项目中我们使用了yog框架，这是一套基于kraken-js，并集成了fis静态资源管理等功能的node框架。</p>
<h2 id="框架简述">框架简述</h2>
<p>我写这篇文章，其实不是为了介绍框架，而是想写写框架使用的体会。加上我本身也只是知其表而不知其里，所以，想更深入地了解yog或是fis的同学，请移步文章末的参考资料。以春苗PC为例，首先我们来看一看目录结构：</p>
<a id="more"></a>
<p><img src="/img/chunmiao-summary-modularization/directory.png" alt="春苗PC目录结构" style="width:176px"></p>
<p>从上图中可以看到，站点根目录下划分了多个子目录：base目录是yog基础运行环境，其余目录都是对应各个子系统，也叫做<strong>模块</strong>，如group、home。每个模块都是一个完整的app，拥有client和server目录，client目录存放前端代码，server目录存放后端代码。当我们要运行group模块，只需将group app发布到与其同级的base目录下，启动node服务，便可在本地监听端口查看运行效果。</p>
<p>yog框架提供了前后端一体App的拆分能力，同时我们可以将多个业务子系统，部署到同一个yog项目中运行。给我们带来的好处就是，方便的模块化拆分，抽取通用代码，降低模块耦合。</p>
<h2 id="模块">模块</h2>
<p>我们进一步看子系统的部分，这里把项目拆分成了common，group，home，topic，user，wenku-api共六个模块。然而，这些模块又可以分成两类：<strong>common模块</strong>与<strong>业务模块</strong>。common模块即通用子系统，存放全站的通用代码。其他模块均为对应功能的业务模块。各业务模块仅对common模块有依赖，业务模块之间互不依赖。每个模块内部，都有大致相同的目录结构：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">├─<span class="keyword">client</span>                 <span class="preprocessor"># 前端代码</span></div><div class="line">│  ├─page                <span class="preprocessor"># 页面</span></div><div class="line">│  ├─<span class="keyword">static</span>              <span class="preprocessor"># 非组件静态资源</span></div><div class="line">│  │  ├─css</div><div class="line">│  │  └─js</div><div class="line">│  └─widget              <span class="preprocessor"># 组件</span></div><div class="line">│     ├─tpl</div><div class="line">│     ├─css</div><div class="line">│     └─js</div><div class="line">├─<span class="keyword">server</span>                 <span class="preprocessor"># 后端代码</span></div><div class="line">│  ├─action              <span class="preprocessor"># MVC中的路由动作，处理页面请求</span></div><div class="line">│  ├─model               <span class="preprocessor"># 存放一些数据层代码，如后端API请求</span></div><div class="line">│  ├─lib                 <span class="preprocessor"># 存放通用库</span></div><div class="line">│  └─router.js           <span class="preprocessor"># AppRouter路由，用于处理自动路由无法满足的需求</span></div><div class="line">└─fis-conf.js            <span class="preprocessor"># FIS编译配置</span></div></pre></td></tr></table></figure>

<p>模块内部结构可分成三部分，client，server，以及fis配置。一般的业务模块都完整的拥有如上述的目录结构。</p>
<p>首先来看client前端部分，又细分page，static，widget三个目录：page目录存放页面级模版文件，如layout布局文件等；static目录存放相应的页面级别的静态资源；widget目录存放组成页面的各个组件。</p>
<p>再看server后端部分，这里分为3个层次。router.js用来配置路由，将页面请求转发至action层。action层处理页面请求，解析请求参数，调用model层方法获取数据，然后渲染页面。model层即编写方法请求后端的数据接口。</p>
<p>了解了模块内部的目录规范，以及模块之间的关系，那么问题来了，我们在拆分组件的时候，代码应该如何存放呢？举一个栗子，我们在考虑一个组件该如何放置的时候，可以思考以下几个方面：一，如果是全站通用的组件，那么则放在common的widget目录下，如果仅限于本功能模块使用，那么则放在本模块下的widget目录；二，如果该组件是js驱动的组件，那么放在js目录下，相应的，其他类型的组件则放在其他目录下。</p>
<h2 id="组件">组件</h2>
<p>何为组件，我找到了fis设计之初对其的定义：</p>
<blockquote>
<p>组件（widget）：能独立提供交互的页面元素区域，俗称页面碎片。一般多个组件构成一个完整的页面。</p>
</blockquote>
<p>下面主要着眼前端代码的部分，让我们更深入一层，来到widget目录，这里就是我们存放组件的地方。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">└─client</div><div class="line">    └─widget</div><div class="line">       ├─tpl                 <span class="comment"># tpl组件</span></div><div class="line">       │  └─header</div><div class="line">       │     ├─header.tpl</div><div class="line">       │     └─header.<span class="operator">less</span></div><div class="line">       ├─js                  <span class="comment"># js组件</span></div><div class="line">       │  └─widget.js</div><div class="line">       └─css                 <span class="comment"># css组件</span></div><div class="line">          └─button.<span class="operator">less</span></div></pre></td></tr></table></figure>

<p>我们看到，所有的组件都可以按组织方式划分为三类。<strong>css组件</strong>最为简单，一般只涉及css文件，定义可复用的class等；<strong>js组件</strong>是使用js的方式初始化，一般会提供接口给页面调用；<strong>tpl组件</strong>则最复杂，它可以封装js组件和css组件，使用模版本身的方式调用，我们可以给tpl组件塞数据。</p>
<p>上文已经提到了widget存放的一些考虑因素。在实际的项目中，我经常会被一个问题困扰，就是“这个组件到底是否需要抽离呢？”。那么这里提出这样一个问题：如何考虑组件是否可以复用或是复用范围呢？有些通用组件较容易判断，如全站统一的页头页尾，那一定是放在common模块下。春苗项目是一个全新的项目，它处于设计初期的阶段。对于站点早期设计时就能明确区分的组件，我们可以直接存放在common。但有些无法确定复用需求的组件，我的经验是先由业务模块维护，当后期的设计需求改变，需要复用时，再进行重构，可以实施以下两种方案：手工copy代码；或抽离到通用模块中，并修改原来的调用路径。</p>
<p>另外还有一种情况是，对于早期设计时，有大于两个的业务模块共享一个通用组件，但随着设计的改变，其中一个业务模块无法再使用公共组件代码时，我们也可以有两种方式处理：重新为该模块单独编写组件；或利用传参判断的方式，在组件内部分别执行不同的代码。当然，具体采用哪一种方案，跟具体的设计需求是分不开的，我们同时要考虑到，代码松耦合，组件该尽量简单。</p>
<h2 id="分层设计">分层设计</h2>
<p>我们回过去看项目前端整个目录结构，不难发现这样的层次模型：从高到低依次为，<strong>站点</strong> &gt; <strong>子系统</strong> &gt; <strong>页面</strong> &gt; <strong>组件</strong>。组件是组成系统的基本单位，整个系统就像搭积木一样一层一层搭起来了。我整理了这张思维导图来帮助梳理思路：</p>
<p><img src="/img/chunmiao-summary-modularization/mindnode_structure.png" alt="前端分层示意" style="width:989px"></p>
<p>这张图的描述并不很完整，但从中我们可以大致窥见整个框架的分层思想。组件化就像一个链，从下至上串起整个系统。同时我们可以发现，除了纵向的分层，还存在一个横向层次：<strong>通用</strong>和<strong>非通用</strong>。在纵向四个层次上，每一层都有自己的“通用”形式。</p>
<p><img src="/img/chunmiao-summary-modularization/mindnode_levels.png" alt="分层下的通用" style="width:537px"></p>
<p>因此，我们可以对通用部分集中维护，定期升级和改进接口；对非通用部分，按需求开发，且不同功能模块互不影响。这种<strong>一个通用子系统+多个业务子系统</strong>的模块化思想，既将不同功能代码解耦，又解决了资源依赖的问题。在这个分层结构下，一个前端站点的三类基础代码：HTML，CSS，JS都得到了较好的组织，分级存放，分类维护。</p>
<p>这篇文章是一次学习总结，在写的过程中，深感一些术语理解和表述的吃力，如有错误还请指正～</p>
<p><em>参考资料：</em><br><a href="http://fis.baidu.com/" target="_blank" rel="external">fis</a><br><a href="https://github.com/fex-team/yog2" target="_blank" rel="external">yog2</a><br><a href="http://oak.baidu.com/fis-plus/document.html" target="_blank" rel="external">fis-plus</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一篇想来整理总结一下春苗项目使用的前端框架及其模块化的思想。这次项目中我们使用了yog框架，这是一套基于kraken-js，并集成了fis静态资源管理等功能的node框架。</p>
<h2 id="框架简述">框架简述</h2>
<p>我写这篇文章，其实不是为了介绍框架，而是想写写框架使用的体会。加上我本身也只是知其表而不知其里，所以，想更深入地了解yog或是fis的同学，请移步文章末的参考资料。以春苗PC为例，首先我们来看一看目录结构：</p>
]]>
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="fis" scheme="http://ianwith.github.io/tags/fis/"/>
    
      <category term="yog" scheme="http://ianwith.github.io/tags/yog/"/>
    
      <category term="modularization" scheme="http://ianwith.github.io/tags/modularization/"/>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[春苗项目小结之一个列表的几种实现]]></title>
    <link href="http://ianwith.github.io/2015/01/14/chunmiao-summary-solutions-to-a-list/"/>
    <id>http://ianwith.github.io/2015/01/14/chunmiao-summary-solutions-to-a-list/</id>
    <published>2015-01-14T14:21:32.000Z</published>
    <updated>2015-03-23T08:12:51.000Z</updated>
    <content type="html"><![CDATA[<p>前一阵子花了很多时间做了<a href="http://chunmiao.baidu.com/" target="_blank" rel="external">春苗家长</a>，最近有时间来做个小结，首先讲的是在做个人主页左侧列表时的几种方法试验。实际的效果可以到春苗个人主页查看。下面我为了突出主要部分，把列表适当简化下，假定我们要实现这样的一个列表：<br><img src="/img/chunmiao-summary-solutions-to-a-list/list_result.png" alt="列表效果" style="width:150px;"><br>这个列表看着挺简单的，但做的时候发现为了找到最优解还是花了一番功夫的。我认为这里主要的矛盾在于分割线和hover背景的实现。下面就说说采用如下的同一套HTML结构，我的五种不同的方法尝试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cnt"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的资料<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的帖子<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的收藏<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>账号设置<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<a id="more"></a>
<h2 id="方法一：">方法一：</h2>
<p>先说最容易最先想到的办法，使用伪元素做分隔线。</p>
<div data-height="268" data-theme-id="12285" data-slug-hash="QwQOML" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{<br>  width: 150px;<br>  height: 300px;<br>  padding-top: 50px;<br>  background-color: #505767;<br>}<br>ul{<br>  padding: 0;<br>  margin: 0;<br>  list-style: none;<br>}<br>li{<br>  text-align: center;<br>  background-color: #505767;<br>}<br>li::after{<br>  display: block;<br>  content: &#x27;&#x27;;<br>  height: 0;<br>  margin: 0 10px;<br>  border-top: 3px solid #575e6d;<br>}<br>li.first::before{<br>  display: block;<br>  content: &#x27;&#x27;;<br>  height: 0;<br>  margin: 0 10px;<br>  border-top: 3px solid #575e6d;<br>}<br>a{<br>  display: block;<br>  height: 46px;<br>  line-height: 46px;<br>  color: #ffffff;<br>  text-decoration: none;<br>}<br>a:hover{<br>  background-color: #484f5e;<br>}</code></pre></div>

<p>兼容性处理：</p>
<p>很明显，ie8以下不支持伪元素，ie8也只支持老的伪元素写法<code>:after</code>。欲达到全浏览器兼容的效果，可以额外开一个标签来实现分隔线。但是这样子缺点更明显，需要增加无语义的标签。因此尽量不用。</p>
<h2 id="方法二：">方法二：</h2>
<p>第二种办法，利用li的hover效果实现背景色的改变，a链接元素的border实现分割线。a元素使用负margin-bottom使边框超出父元素li，同时li设置一个和背景同色，与a边框等宽的border，给a的边框留出空间。</p>
<div data-height="268" data-theme-id="12285" data-slug-hash="ogEyKW" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{<br>  width: 150px;<br>  height: 300px;<br>  padding-top: 50px;<br>  background-color: #505767;<br>}<br>ul{<br>  padding: 0;<br>  margin: 0;<br>  list-style: none;<br>}<br>li{<br>  text-align: center;<br>  background-color: #505767;<br>  border-bottom: 3px solid #505767;<br>  *height: 46px;<br>}<br>li.first{<br>  border-top: 3px solid #505767;<br>}<br>li:hover{<br>  background-color: #484f5e;<br>}<br>a{<br>  display: block;<br>  height: 46px;<br>  line-height: 46px;<br>  color: #ffffff;<br>  text-decoration: none;<br>  margin: 0 10px;<br>  border-bottom: 3px solid #575e6d;<br>  margin-bottom: -3px;<br>}<br>li.first a{<br>  border-top: 3px solid #575e6d;<br>  margin-top: -3px;<br>}</code></pre></div>

<p>兼容性处理：</p>
<ol>
<li>ie6下，非a链接元素hover样式无效。可能的解决方案：目前css父元素选择器标准还没有浏览器去实现，要让ie6下非链接元素hover生效，只能尝试通过一些脚本实现。  </li>
<li>ie6、7下，该方案无法得到预期的目的，子元素a的负margin-bottom对父元素高度没有任何影响，所以下边框无法超出父元素li，需要给li加一个和a等高的高度<code>*height: 46px;</code>，如此一来，ie7表现正常，但是由于ie6下子元素是始终无法溢出父元素的（下面细说），a的下边框直接隐藏了，所以还需为ie6做特别优化。考虑到这里，我发现自己一开始的思路就有误，以至于越走越偏，这是一个不成熟的方案，于是有了方案三。</li>
</ol>
<h2 id="方法三：">方法三：</h2>
<p>方法二改良版，同样给li加hover。利用父元素li的margin-bottom撑开3px的高度，给a边框留出空间，a元素使用<code>position: relative</code>，li与a等高。</p>
<div data-height="268" data-theme-id="12285" data-slug-hash="xbYyNO" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{<br>  width: 150px;<br>  height: 300px;<br>  padding-top: 50px;<br>  background-color: #505767;<br>}<br>ul{<br>  padding: 0;<br>  margin: 0;<br>  list-style: none;<br>}<br>li{<br>  text-align: center;<br>  background-color: #505767;<br>  height: 46px;<br>  margin-bottom: 3px;<br>  _overflow: hidden;<br>}<br>li:hover{<br>  background-color: #484f5e;<br>}<br>a{<br>  position: relative;<br>  display: block;<br>  height: 46px;<br>  line-height: 46px;<br>  color: #ffffff;<br>  text-decoration: none;<br>  margin: 0 10px;<br>  border-bottom: 3px solid #575e6d;<br>}<br>li.first a{<br>  border-top: 3px solid #575e6d;<br>  top: -3px;<br>}</code></pre></div>

<p>兼容性处理：</p>
<p>同样，ie6下，子元素会撑大父元素，所以a元素的下边框也被包含在li内了，达不到我们的效果。给li的margin-bottom只会增加li之间的间距，所以ie6下看起来li之间间距变大了。解决方案：为了让ie6子元素能溢出父元素，使用<code>_overflow: hidden</code>，多谢子元素relative时，ie6对overflow的错误处理！</p>
<p>遗留的问题：</p>
<ol>
<li>方法二中的问题1依然存在。  </li>
<li>这两种方法，a链接并不充满整个列表宽度，两边缘不可点击。</li>
</ol>
<h2 id="方法四：">方法四：</h2>
<p>由于两个遗留的问题，上述两种方案并不优雅，我们换一种思路。用li元素来做边框，a链接元素加hover背景色。为了要让背景色充满整个宽度，a元素可以使用绝对定位。</p>
<div data-height="268" data-theme-id="12285" data-slug-hash="xbYMpb" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{<br>  width: 150px;<br>  height: 300px;<br>  padding-top: 50px;<br>  background-color: #505767;<br>}<br>ul{<br>  padding: 0;<br>  margin: 0;<br>  list-style: none;<br>}<br>li{<br>  position: relative;<br>  text-align: center;<br>  background-color: #505767;<br>  margin-left: 10px;<br>  margin-right: 10px;<br>  height: 46px;<br>  border-bottom: 3px solid #575e6d;<br>  *vertical-align: middle;<br>}<br>li.first{<br>  border-top: 3px solid #575e6d;<br>}<br>a{<br>  position: absolute;<br>  color: #ffffff;<br>  text-decoration: none;<br>  line-height: 46px;<br>  left: -10px;<br>  right: -10px;<br>  _width: 150px;<br>}<br>a:hover{<br>  background-color: #484f5e;<br>}</code></pre></div>

<p>兼容性处理：</p>
<ol>
<li>这种定位方式的问题在于，ie6下，left和right不能同时生效，因此需要针对ie6加一个固定的宽度，才能使其充满。这就导致，在宽度不固定的情况下，这办法就变得不可用。</li>
<li>ie6、7下，li之间会产生大概4像素的间距，这个间距跟border值无关，不明原因，但经过排查，初步诊断为行高的问题，给li加上<code>*vertical-align: middle</code>得以解决。</li>
</ol>
<h2 id="方法五：">方法五：</h2>
<p>此方法和上述方法异曲同工，这里利用了元素宽度不固定时，左右margin负值能把宽度撑宽的特点，使得a元素左右扩展占满整个列表宽度。</p>
<p><div data-height="268" data-theme-id="12285" data-slug-hash="pvaGpQ" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{<br>  width: 150px;<br>  height: 300px;<br>  padding-top: 50px;<br>  background-color: #505767;<br>}<br>ul{<br>  padding: 0;<br>  margin: 0;<br>  list-style: none;<br>}<br>li{<br>  text-align: center;<br>  background-color: #505767;<br>  border-bottom: 3px solid #575e6d;<br>  margin-left: 10px;<br>  margin-right: 10px;<br>}<br>li.first{<br>  border-top: 3px solid #575e6d;<br>}<br>a{<br>  display: block;<br>  color: #ffffff;<br>  text-decoration: none;<br>  line-height: 46px;<br>  margin-left: -10px;<br>  margin-right: -10px;<br>}<br>a:hover{<br>  background-color: #484f5e;<br>}</code></pre></div><script async src="//assets.codepen.io/assets/embed/ei.js"></script></p>
<p>兼容性处理：</p>
<p>这个方法唯一的一个问题，就是ie6下，鼠标只有悬浮到文字上是才会出hover状态。但是这个hover态背景是充满整个宽度的，所以这个问题并不是很大。要解决的话，可以给a加宽度<code>_width: 150px;</code>来解决。</p>
<p>可见这个办法看似简单，得到的效果却很好，没有遗留问题，十分优雅！一开始怎么没想到呢～其实，如果基础足够扎实，应该一眼就能看出最好的解决方案。如果大家有更好的方法，一定要记得告诉我～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前一阵子花了很多时间做了<a href="http://chunmiao.baidu.com/" target="_blank" rel="external">春苗家长</a>，最近有时间来做个小结，首先讲的是在做个人主页左侧列表时的几种方法试验。实际的效果可以到春苗个人主页查看。下面我为了突出主要部分，把列表适当简化下，假定我们要实现这样的一个列表：<br><img src="/img/chunmiao-summary-solutions-to-a-list/list_result.png" alt="列表效果" style="width:150px;"><br>这个列表看着挺简单的，但做的时候发现为了找到最优解还是花了一番功夫的。我认为这里主要的矛盾在于分割线和hover背景的实现。下面就说说采用如下的同一套HTML结构，我的五种不同的方法尝试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cnt"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的资料<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的帖子<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>我的收藏<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>账号设置<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="css" scheme="http://ianwith.github.io/tags/css/"/>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开篇，在北京]]></title>
    <link href="http://ianwith.github.io/2014/11/17/first-post-in-beijing/"/>
    <id>http://ianwith.github.io/2014/11/17/first-post-in-beijing/</id>
    <published>2014-11-17T15:55:37.000Z</published>
    <updated>2015-03-23T08:12:51.000Z</updated>
    <content type="html"><![CDATA[<p>拖延症晚期的我终于也把博客弄起来了，想来这事已经拖了快半年了。本来想折腾下jekyll，后来还是觉得写东西要紧，就选了上手更简单的hexo，而且刚好这段时间也需要学习下nodejs。好了，既然博客的样子已经有了，优化的事以后再说吧=.=</p>
<p>好，开篇就来写写来北京一个多星期的感受吧。其实，写博客的主要目的，就是想<strong>记录</strong>，生活中有意思的事情、学习到的新知识。因为我本身最大的缺点就是不会主动去感悟，去思考。简单来说就是一个字，懒。所以希望能通过维护这个博客，让我每天有意识的过好每一天，不要昏昏沉沉的。同时也是锻炼自己表达能力的一种方式，希望以后博文的质量越来越高吧~</p>
<a id="more"></a>
<p>11月初刚来北京的时候，诸多不习惯的地方，这里的环境和广州还是很不一样的。首先一下子就从短袖加到厚大衣，刚下火车的时候差点把我冷死，而且天气很干燥，好的事情是托APEC福，雾霾倒是暂时没感觉。还有一个最大的感受是，北京的生活节奏好快，每天去坐地铁，自动扶梯上，大家都是用跑的！前几天还有新闻说，一女生挤地铁被门夹住身亡，好可怕。</p>
<p>来到这边以后，再也没有每天走路就能上下班这么爽了，现在上一次班，要走路，挤地铁，排队等班车，坐班车才能到公司，好累。。可能正是因为这样，大家都把工作和生活分得很开了，再也没有加班到11点的事情了。至于工作环境嘛，还是前厂好啊，可以用小资情调来形容，至少人文关怀做得比较到位。到现在也渐渐适应了这边的工作环境，但是我还是会怀念广州那边每天问早的前台，友好的保洁阿姨，还有食堂里超好吃的甜点。</p>
<p>工作方面刚来就有一些变数，被组长告知要离开这个部门去做产品了，本来我想唉真是不可思议，又要回到产品线了，后来又有了其他一些变化，最后我还是继续留下来，转去隔壁的fis组了，既然方向定了，要做的就是努力再努力了！总的来说在百度一个星期，新的同事都很nice。但整个团队是技术驱动的，身边都是厉害的工程师，工作方式和氛围肯定和之前截然不同！以前的团队属于Design Team，工作上是业务驱动的，一切围绕产品，因此除了技术上的要求，还会更多要求对业务的熟悉度，项目的推动能力，以及团队沟通能力。新的团队就没有pm天天催了，也因此自驱在这里就很重要。另外让我感受最深的是，在这里，会充分尊重每个人的想法，也能看到每个人的特长和优点，这是公司最好的一点了。</p>
<p>还有值得一提的是，周六的时候去看了Interstellar，把我喜欢的题材星空，时间，亲情，都融合在一起了，一句话评价：我想去再看一遍！</p>
<blockquote>
<p>Do not go gentle into that good night,<br>Old age should burn and rave at close of day;<br>Rage, rage against the dying of the light.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>拖延症晚期的我终于也把博客弄起来了，想来这事已经拖了快半年了。本来想折腾下jekyll，后来还是觉得写东西要紧，就选了上手更简单的hexo，而且刚好这段时间也需要学习下nodejs。好了，既然博客的样子已经有了，优化的事以后再说吧=.=</p>
<p>好，开篇就来写写来北京一个多星期的感受吧。其实，写博客的主要目的，就是想<strong>记录</strong>，生活中有意思的事情、学习到的新知识。因为我本身最大的缺点就是不会主动去感悟，去思考。简单来说就是一个字，懒。所以希望能通过维护这个博客，让我每天有意识的过好每一天，不要昏昏沉沉的。同时也是锻炼自己表达能力的一种方式，希望以后博文的质量越来越高吧~</p>
]]>
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
  </entry>
  
</feed>
