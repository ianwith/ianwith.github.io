<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ian&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/500744c4bc44a5a388ffd6f19e02803d</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ianwith.github.io/"/>
  <updated>2020-06-26T16:50:18.875Z</updated>
  <id>http://ianwith.github.io/</id>
  
  <author>
    <name>Ian Gong</name>
    <email>iangong@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter React Comparison</title>
    <link href="http://ianwith.github.io/2020/06/26/flutter-react-comparison/"/>
    <id>http://ianwith.github.io/2020/06/26/flutter-react-comparison/</id>
    <published>2020-06-26T14:23:07.000Z</published>
    <updated>2020-06-26T16:50:18.875Z</updated>
    
    <content type="html"><![CDATA[<p>In the past six months, I spent a lot of time spearheading and experimenting with Flutter, and finally implemented a multi-platform Application for data tracking which is used within LINE company. Then I took this opportunity to give a talk inside the company that introduced and promoted Flutter. Here’s the slide of the presentation.</p><p><a href="https://slides.com/yanggong/flutter-intro/" target="_blank" rel="noopener">https://slides.com/yanggong/flutter-intro/</a></p><a id="more"></a><h2 id="Flutter-vs-React"><a href="#Flutter-vs-React" class="headerlink" title="Flutter vs React"></a>Flutter vs React</h2><p>The most interesting part I want to address is the comparsion between Flutter and React.</p><p>As we know, Flutter was very much inspired by React. So when I tried to write the same App(UI) by using Flutter and React, I found that the code was surprisingly similar. So I think it’s a good idea for a front-end engineer to learn about Flutter by comparing the similarities and differences in writing layout of React and Flutter.</p><p>Here is two demo: <a href="https://github.com/ianwith/demo_flutter" target="_blank" rel="noopener">demo_flutter</a> vs <a href="https://github.com/ianwith/demo_react" target="_blank" rel="noopener">demo_react</a></p><p>Say that we are going to make a screen like this:</p><img src="/img/flutter-react-comparison/demo_screen.png" alt="Demo Screen" style="width:460px"><p>First of all, let’s see how we will make it in React.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">HomePage</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  incrementCounter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      counter: state.counter + <span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;p className=<span class="string">"text"</span>&gt;I will code &#123;<span class="keyword">this</span>.state.counter&#125; lines <span class="keyword">this</span> month.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button className="button" onClick=&#123;this.incrementCounter&#125;&gt;Increment&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9037AA</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then comes the most exciting part, how should we implement this with Flutter?</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CupertinoApp(</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      home: HomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the home page of your application.</span></span><br><span class="line">  HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CupertinoPageScaffold(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: MediaQuery.of(context).size.width,</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'I will code <span class="subst">$_counter</span> lines this month.'</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                fontSize: <span class="number">28</span>,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            FlatButton(</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">'Increment'</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  color: Colors.white,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              onPressed: _incrementCounter,</span><br><span class="line">              color: Colors.purple,</span><br><span class="line">              shape: RoundedRectangleBorder(</span><br><span class="line">                borderRadius: BorderRadius.circular(<span class="number">8.0</span>),</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(App());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, the code for Flutter and the code for React are almost one-to-one.</p><p>For example, we have the entry of Application in Flutter: <code>runApp(App())</code>. This can correspond to the <code>ReactDOM.render(&lt;App/&gt;, root)</code> in the React.</p><p>We have defined two widgets(components) for the screen: <code>App</code> and <code>HomePage</code>, each have a <code>build</code> function(<code>render</code> in react). When you take a close look at the <code>HomePage</code>, you will find class is organized exactly the same way: we have an initialized state and an Event handle to change the state. Although there is one big difference while writing <code>StatefulWidget</code>, the actual <code>State</code> is seperated from parent <code>StatefulWidget</code>, this is because every widget, stateless or stateful, is designed to be immutable, while a state is mutable. For now we can just ignore the technical details here and keep going to compare the layout part.</p><p>So for the layout of <code>HomePage</code>. The basic tree structure here is that we have a <code>container</code> as a root, and it contains two children: a <code>text</code> and a <code>button</code>. Although the structure is the same but the code of Flutter is a little bit longer the React’s one. This is because we are making styles programmatically, instead of writing CSS in traditional Web development. But you can also find the corresponding CSS in React from the Layout widget of Flutter. For example, the <code>Column</code> widget corresponds to <code>flex-direction: column</code>, the <code>MainAxisAlignment.center</code> parameter corresponds to <code>justify-content: center</code>, the <code>CrossAxisAlignment.center</code> parameter corresponds to <code>align-items: center</code>. And then naturally, we go ahead and specify <code>TextStyle</code>, <code>color</code>, <code>shape</code>, <code>onPressed</code> while instantiating widgets class, fairly straightforward.</p><p>It’s amazing when you see such a high level of consistency. Your knowledge on React can be seamlessly linked to Flutter. More than that, Flutter has other concepts that have been transplanted from React like Redux, Provider, simply because the data flow model in Flutter is also inspired by React. Personally, I am glad to see how React’s philosophy is affecting all areas of UI development, and looking forward to seeing the UI-related development unified under the same pattern.</p><p>To summarize, I am trying to link Flutter with React and find a way to flatten the learning curve for front-end engineer with React experience. This is just a introductory article about Flutter. Flutter team also provides a series of helpful tutorials for developers coming from different backgrounds. Go and check it out: <a href="[https://flutter.dev/docs/get-started/flutter-for/react-native-devs]">From another platform?</a></p><p>Happy making Flutter Apps.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the past six months, I spent a lot of time spearheading and experimenting with Flutter, and finally implemented a multi-platform Application for data tracking which is used within LINE company. Then I took this opportunity to give a talk inside the company that introduced and promoted Flutter. Here’s the slide of the presentation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.com/yanggong/flutter-intro/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://slides.com/yanggong/flutter-intro/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="android" scheme="http://ianwith.github.io/tags/android/"/>
    
      <category term="ios" scheme="http://ianwith.github.io/tags/ios/"/>
    
      <category term="flutter" scheme="http://ianwith.github.io/tags/flutter/"/>
    
      <category term="react" scheme="http://ianwith.github.io/tags/react/"/>
    
      <category term="cross platform" scheme="http://ianwith.github.io/tags/cross-platform/"/>
    
  </entry>
  
  <entry>
    <title>Shadow DOM Styling Notes</title>
    <link href="http://ianwith.github.io/2020/03/18/shadow-dom-styling-notes/"/>
    <id>http://ianwith.github.io/2020/03/18/shadow-dom-styling-notes/</id>
    <published>2020-03-18T12:39:32.000Z</published>
    <updated>2020-06-26T16:50:18.877Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I’m making a company-wide Web Component library. Here are some notes regarding styling. I’m going to use <code>&lt;l-header-bar&gt;</code> component as an example.</p><h2 id="Note-1-The-Shadow-DOM-boundary-shadow-root-prevents-styling-coming-in-or-going-out"><a href="#Note-1-The-Shadow-DOM-boundary-shadow-root-prevents-styling-coming-in-or-going-out" class="headerlink" title="Note 1: The Shadow DOM boundary (shadow root) prevents styling coming in or going out"></a>Note 1: The Shadow DOM boundary (shadow root) prevents styling coming in or going out</h2><p>Web components can isolate styles via the Shadow DOM, which is called scoped CSS:</p><ul><li>CSS selectors from the outer page don’t apply inside your component.</li><li>Styles defined inside don’t bleed out. They’re scoped to the host element.</li></ul><p>CSS selectors used inside shadow DOM apply locally to your component. In practice, this means we can use common id/class names again, without worrying about conflicts elsewhere on the page. Simpler CSS selectors are a best practice inside Shadow DOM. They’re also good for performance.</p><p>Meanwhile, outside CSS selectors are not able to access the HTML element inside Shadow DOM. The following code won’t work.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">header &#123;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">l-header-bar</span> &gt; <span class="selector-tag">header</span> &#123;    <span class="comment">/* No Way! */</span></span></span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-2-Custom-properties-go-through-the-shadow-DOM"><a href="#Note-2-Custom-properties-go-through-the-shadow-DOM" class="headerlink" title="Note 2: Custom properties go through the shadow DOM"></a>Note 2: Custom properties go through the shadow DOM</h2><p>Styles inside shadow DOM can access CSS variables even from outside.<br>According to this, One way to custom style is to provide hooks in the form of CSS variables and let user use these variables.</p><p>For example, inside <code>l-header-bar</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">header &#123;</span><br><span class="line">    background: var(--background);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In user’s HTML, they can do this.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">l-header-bar &#123;</span><br><span class="line">    --background: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-3-A-slot-is-globally-stylable"><a href="#Note-3-A-slot-is-globally-stylable" class="headerlink" title="Note 3: A slot is globally stylable"></a>Note 3: A slot is globally stylable</h2><p>A slot element style is defined outside the Web Components.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"action-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In user’s code, they can completely control the action-left slot style(which is a customized button in the following case). ← This allows our components to be flexible.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"action-left"</span>&gt;</span>User Customized Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">button &#123;</span><br><span class="line"><span class="css"><span class="comment">/* style the button as they want */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-4-A-slot-can-also-take-styles-defined-inside-the-shadow-DOM"><a href="#Note-4-A-slot-can-also-take-styles-defined-inside-the-shadow-DOM" class="headerlink" title="Note 4: A slot can also take styles defined inside the shadow DOM."></a>Note 4: A slot can also take styles defined inside the shadow DOM.</h2><p>Inside Shadow DOM, we can use <code>::slotted(&lt;compound-selector&gt;)</code> to style nodes that are distributed into a <code>&lt;slot&gt;</code>. So this allows us to put additional styles to user’s slots. However, we can only select top-level slotted nodes.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"my_title"</span>&gt;</span></span><br><span class="line">        LINE NEWS, <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="css"><span class="selector-pseudo">::slotted(.my_title)</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/* DOESN'T WORK (can only select top-level nodes).</span></span></span><br><span class="line"><span class="css"><span class="selector-pseudo">::slotted(.icon)</span>,</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">::slotted(.my_title</span> <span class="selector-class">.icon</span>) &#123;</span></span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-5-Inherited-properties-will-be-inherited-as-usual"><a href="#Note-5-Inherited-properties-will-be-inherited-as-usual" class="headerlink" title="Note 5: Inherited properties will be inherited as usual."></a>Note 5: Inherited properties will be inherited as usual.</h2><p>Take a look at the following code from the user side to see how the properties affect style inside <code>l-header-bar</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">black</span>;   <span class="comment">/* color goes through the l-header-bar, e.g. the text color inside l-header-bar is inherited from this. */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;<span class="comment">/* font-size also goes through the l-header-bar. */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span>: <span class="selector-tag">block</span>; <span class="comment">/* display is not a inheritable property so setting this does not make the display property of l-header-bar also become block. */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">backgound</span>: <span class="selector-tag">red</span>; <span class="comment">/* backgound is not a inheritable property so setting this does not make the background property of l-header-bar also become red. But since background property defaults to transparent, so in act, l-header-bar can get a red background. */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* However, user can set style of l-header-bar element directly. The code below would work */</span></span></span><br><span class="line">    l-header-bar &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;  <span class="comment">/* user need to set display: block here because display property won't inherit parents' display value. Custom elements are display: inline by default. */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">blue</span>;<span class="comment">/* l-header-bar element's background property will be set to blue. */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>However, <code>l-header-bar</code> can prevent external inheritable styles from affecting the interior, by setting <code>all: initial;</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">:host</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">all</span>: <span class="selector-tag">initial</span>;   <span class="comment">/* subsequent properties are reset! So inheritable styles from outside cannot cross the shadow boundary */</span></span></span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;</span><br><span class="line"><span class="css"><span class="comment">/* If we reseted to initial, the font-size and color here will be initial value of h1. Otherwise, it will inherit (16px black) from the outside div. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-6-For-styling-the-component-itself-Shadow-DOM-host-Outside-styles-always-win-over-styles-defined-within-Shadow-DOM"><a href="#Note-6-For-styling-the-component-itself-Shadow-DOM-host-Outside-styles-always-win-over-styles-defined-within-Shadow-DOM" class="headerlink" title="Note 6: For styling the component itself (Shadow DOM host): Outside styles always win over styles defined within Shadow DOM"></a>Note 6: For styling the component itself (Shadow DOM host): Outside styles always win over styles defined within Shadow DOM</h2><p>The user is free to style the component element itself because it’s just light dom.</p><p>Rules in the parent page have higher specificity than <code>:host</code> rules defined in the element. That is, outside styles win. This allows users to override your top-level styling from the outside. Also, <code>:host</code> only works in the context of a shadow root, so you can’t use it outside of shadow DOM.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">:host</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">l-header-bar &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 90%; <span class="comment">/* This wins! l-header-bar element's width is 90%. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Note-7-host-lt-selector-gt-and-host-context-lt-selector-gt"><a href="#Note-7-host-lt-selector-gt-and-host-context-lt-selector-gt" class="headerlink" title="Note 7: :host(&lt;selector&gt;) and :host-context(&lt;selector&gt;)"></a>Note 7: <code>:host(&lt;selector&gt;)</code> and <code>:host-context(&lt;selector&gt;)</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user's HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span> <span class="attr">attr</span>=<span class="string">"sth"</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">l-header-bar</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"darktheme"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">l-header-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">l-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- l-header-bar template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">:host</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* style &lt;l-header-bar&gt; element. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-pseudo">:host(</span><span class="selector-pseudo">:hover)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* style when &lt;l-header-bar&gt; has hover. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-pseudo">:host(</span><span class="selector-attr">[disabled]</span>) &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* style when &lt;l-header-bar&gt; has disabled attribute. */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-pseudo">:host(</span><span class="selector-attr">[attr=<span class="string">"sth"</span>]</span>) &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* style when &lt;l-header-bar&gt; attribute attr is "sth". */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-pseudo">:host(.blue)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* color &lt;l-header-bar&gt; when it has class="blue" */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-pseudo">:host-context(.darktheme)</span> &#123;</span></span><br><span class="line"><span class="css"><span class="comment">/* style &lt;l-header-bar&gt; when it's a descendant of .darktheme */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I’m making a company-wide Web Component library. Here are some notes regarding styling. I’m going to use &lt;code&gt;&amp;lt;l-header-bar&amp;
      
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="css" scheme="http://ianwith.github.io/tags/css/"/>
    
      <category term="Web Components" scheme="http://ianwith.github.io/tags/Web-Components/"/>
    
      <category term="Shadow DOM" scheme="http://ianwith.github.io/tags/Shadow-DOM/"/>
    
  </entry>
  
  <entry>
    <title>Everything You Would Like to Know About WeChat Mini Program</title>
    <link href="http://ianwith.github.io/2020/02/12/everything-you-would-like-to-know-about-wechat-mini-program/"/>
    <id>http://ianwith.github.io/2020/02/12/everything-you-would-like-to-know-about-wechat-mini-program/</id>
    <published>2020-02-12T11:00:00.000Z</published>
    <updated>2020-06-26T16:50:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Product-Positioning"><a href="#Product-Positioning" class="headerlink" title="Product Positioning"></a>Product Positioning</h2><p>WeChat Mini Programs are a new way of connecting users and services. They are easy to access and share on WeChat, delivering an excellent user experience.</p><h2 id="What-are-the-differences-between-WeChat-js-sdk-weui-and-Mini-Program"><a href="#What-are-the-differences-between-WeChat-js-sdk-weui-and-Mini-Program" class="headerlink" title="What are the differences between WeChat js-sdk, weui, and Mini Program."></a>What are the differences between WeChat js-sdk, weui, and Mini Program.</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/en/OA_Web_Apps/JS_SDK.html" target="_blank" rel="noopener">WeChat js-sdk</a> is a web development kit based on WeChat provided by WeChat public platform for web developers. By using WeChat js-sdk, web developers can effectively use the capabilities of WeChat to take photos, select pictures, voice, location and other mobile phone systems, and directly use WeChat sharing, scan, card coupons, payment and other WeChat-specific capabilities to provide better web experience for WeChat users. You can think of WeChat js-sdk as our LIFF.</p><p><a href="https://weui.io/" target="_blank" rel="noopener">weui</a> is a UI library by WeChat official design team. weui has <a href="https://github.com/Tencent/weui" target="_blank" rel="noopener">an ordinary web (HTML/CSS/JS) version</a> and <a href="https://github.com/Tencent/weui-wxss/" target="_blank" rel="noopener">a Mini Program version</a>. Basically, it contains only styles and has no functionality of WeChat js-sdk.</p><p>Mini Program is a more advanced solution, which takes one step forward from an ordinary mobile Web page. As you know, Mini Program provides a set of languages to let developers build more powerful apps within WeChat platform. The merits(from the user and developer perspective) are:</p><ul><li>Fast loading</li><li>More powerful capabilities</li><li>Native experience</li><li>Easy and secure WeChat data exposure</li><li>Efficient and simple development</li></ul><p>For more details – <a href="https://developers.weixin.qq.com/miniprogram/en/dev/framework/quickstart/#About-Mini-Programs%5D(https://developers.weixin.qq.com/miniprogram/en/dev/framework/quickstart/%23About-Mini-Programs" target="_blank" rel="noopener">About Mini Programs</a></p><a id="more"></a><h2 id="How-do-you-access-Mini-Programs"><a href="#How-do-you-access-Mini-Programs" class="headerlink" title="How do you access Mini Programs?"></a>How do you access Mini Programs?</h2><p>From almost everywhere, e.g. a QR code from offline or online, WeChat’s drag down view(recently visited and my favorites will be listed here), “Search” box of WeChat, “Discover” tab of WeChat, WeChat public/official accounts, a chat message someone shared with you.</p><img src="/img/everything-you-would-like-to-know-about-wechat-mini-program/qrcode.jpg" alt="Access Mini Programs" style="width:260px"><h2 id="Steps-from-registering-developing-to-publishing-your-Mini-Programs"><a href="#Steps-from-registering-developing-to-publishing-your-Mini-Programs" class="headerlink" title="Steps from registering, developing to publishing your Mini Programs."></a>Steps from registering, developing to publishing your Mini Programs.</h2><h4 id="1-Register"><a href="#1-Register" class="headerlink" title="1. Register"></a><em>1. Register</em></h4><p>First of all, you need to register a Mini Program Account on WeChat Official Accounts Platform official website. This is kind of like Apple Developer account, you can register as Individual or Company or other entity types.</p><h4 id="2-Mini-Program-information-is-perfect"><a href="#2-Mini-Program-information-is-perfect" class="headerlink" title="2. Mini Program information is perfect"></a><em>2. Mini Program information is perfect</em></h4><p>After registration, log in to the Mini Program admin console to complete the Mini Program’s Information and prepare for development. (refer to step 1 in the picture)</p><img src="/img/everything-you-would-like-to-know-about-wechat-mini-program/step2.png" alt="Step 2" style="width:600px"><h4 id="3-Develop-Mini-Programs"><a href="#3-Develop-Mini-Programs" class="headerlink" title="3. Develop Mini Programs"></a><em>3. Develop Mini Programs</em></h4><p>Download Wechat DevTools. You can develop Mini Program using your own editor as you like, It’s no different than normal web development. However, with Wechat DevTools you can develop and debug Mini Program easily. Here is what it looks like:</p><img src="/img/everything-you-would-like-to-know-about-wechat-mini-program/step3.png" alt="Step 3" style="width:600px"><h4 id="4-Submit-review"><a href="#4-Submit-review" class="headerlink" title="4. Submit review"></a><em>4. Submit review</em></h4><p>After development, you can upload your code to Cloud by pressing the “upload” button in DevTools. Then go to the Mini Program admin console to see your uploaded versions, you can do versions management like: set v1.1.0 to beta preview, after preview is fine, submit v1.1.0 to WeChat team for review.</p><img src="/img/everything-you-would-like-to-know-about-wechat-mini-program/step4.png" alt="Step 4" style="width:600px"><h4 id="5-Release-it-after-passing-review"><a href="#5-Release-it-after-passing-review" class="headerlink" title="5. Release it after passing review"></a><em>5. Release it after passing review</em></h4><p>In my experience, the WeChat team’s review takes approximately from two hours to half a day. After the code of a Mini Program is approved, just press the “Release” button and here we go.</p><h2 id="Technical-Overview"><a href="#Technical-Overview" class="headerlink" title="Technical Overview"></a>Technical Overview</h2><h4 id="Q-What-does-a-typical-Mini-Program-project-consist-of"><a href="#Q-What-does-a-typical-Mini-Program-project-consist-of" class="headerlink" title="Q: What does a typical Mini Program project consist of?"></a>Q: What does a typical Mini Program project consist of?</h4><p>Here is a basic structure of Mini Program project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── app.js // app level logic</span><br><span class="line">├── app.json // app level configurations for Mini Program</span><br><span class="line">├── app.wxss // optional, common style sheet</span><br><span class="line">├── pages</span><br><span class="line">│   │── index // an index page</span><br><span class="line">│   │   ├── index.wxml // template of index page</span><br><span class="line">│   │   ├── index.js // javascript logic of index page</span><br><span class="line">│   │   ├── index.json // page level configurations for index page</span><br><span class="line">│   │   └── index.wxss // style sheet of index page</span><br><span class="line">│   └── logs</span><br><span class="line">│       ├── logs.wxml</span><br><span class="line">│       └── logs.js</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><h4 id="Q-What-configuration-does-the-app-json-file-contain"><a href="#Q-What-configuration-does-the-app-json-file-contain" class="headerlink" title="Q: What configuration does the app.json file contain?"></a>Q: What configuration does the app.json file contain?</h4><p>For example, you can determine page file paths and window behaviors, set the network timeout, and set multiple tabs. reference <a href="https://developers.weixin.qq.com/miniprogram/en/dev/reference/configuration/app.html" target="_blank" rel="noopener">configuration</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [ <span class="comment">// The page path list. e.g. There are two pages in this Mini Program.</span></span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/index"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123; <span class="comment">// Window is used to set the Mini Program status bar, navigation bar, titles, and window background colors.</span></span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Demo"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123; <span class="comment">// Behavior of the tab bar at the bottom of the page.</span></span><br><span class="line">    <span class="attr">"list"</span>: [&#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"Home"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"Log"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"networkTimeout"</span>: &#123;</span><br><span class="line">    <span class="attr">"request"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"downloadFile"</span>: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"navigateToMiniProgramAppIdList"</span>: [</span><br><span class="line">    <span class="string">"wxe5f52902cf4de896"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Q-What-does-the-app-js-contain"><a href="#Q-What-does-the-app-js-contain" class="headerlink" title="Q: What does the app.js contain?"></a>Q: What does the app.js contain?</h4><p>You can think of it as the entrance to run the Mini Program. Developers call App() method in app.js, which is used to register a Mini Program app instance. Each Mini Program has only one app instance. In App() method, you can link the lifecycle callback function, error listening function, page not found listening function, and the like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch (options) &#123;</span><br><span class="line">    <span class="comment">// Do something initial when launch.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow (options) &#123;</span><br><span class="line">    <span class="comment">// Do something when show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide () &#123;</span><br><span class="line">    <span class="comment">// Do something when hide.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError (msg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  globalData: <span class="string">'I am global data'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Q-How-do-I-write-a-page"><a href="#Q-How-do-I-write-a-page" class="headerlink" title="Q: How do I write a page?"></a>Q: How do I write a page?</h4><p>A page usually consists of four files: wxml + wxss + js +json. See the following example.</p><p>You should call Page() method in js file to register a page instance, then you specify the initial data of the page, the lifecycle callback function, the event handling function…</p><p>You should use WXML to define page structure. you might notice that the syntax is heavily inspired by VueJS.</p><p>Additionally, don’t forget to use WXSS to define styles, and use json file to configure the window behaviors of this page.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"onMyOwnHandler"</span>&gt;</span>Try to change data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    view: <span class="string">'MINA'</span></span><br><span class="line">  &#125;</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do some initialize when page load.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page ready.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something when page show.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  onMyOwnHandler(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">view</span>: <span class="string">"WEBVIEW"</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** index.wxss **/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"common.wxss"</span>;</span><br><span class="line"><span class="selector-tag">view</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Q-What-is-WXML-WXSS"><a href="#Q-What-is-WXML-WXSS" class="headerlink" title="Q: What is WXML/WXSS?"></a>Q: What is WXML/WXSS?</h4><p>WXML stands for WeiXin Markup Language. It’s a markup language invented by WeChat and can be used to build the page structure. <a href="https://developers.weixin.qq.com/miniprogram/en/dev/reference/wxml/" target="_blank" rel="noopener">WXML reference</a></p><p>WXSS stands for WeiXin Style Sheets. It’s a set of style languages that describe WXML component styles. It has most of the features of CSS but also incorporates some new features and modifications.</p><h4 id="Q-What-components-WXML-tags-can-I-use"><a href="#Q-What-components-WXML-tags-can-I-use" class="headerlink" title="Q: What components(WXML tags) can I use?"></a>Q: What components(WXML tags) can I use?</h4><p><a href="https://developers.weixin.qq.com/miniprogram/en/dev/component/" target="_blank" rel="noopener">official documents</a><br>Please refer to the above documentation for a complete list of components.<br>The syntax of writing a component is consistent with writing HTML. A component comes with some features and basic WeChat styles, but developers have a lot of freedom to style their own components with WXML/WXSS, just like HTML/CSS. Basically, most components are rendered as the web elements(dom), some components are implemented as native components for better performance and user experience.<br>Give the following most frequently used components as example.</p><ol><li>View Containers</li></ol><ul><li>view (View Container, it’s just like div tag in HTML)</li><li>scroll-view (A scrollable view container)</li><li>swiper (A sliding view container)</li></ul><ol start="2"><li>Basic Components</li></ol><ul><li>icon (A icon with WeChat style, you can specify color, types, size)</li><li>progress (Progress bar)</li><li>rich-text (Rich text is rendered by specifying HTML nodes, useful for articles or blogs)</li><li>text (Simple text)</li></ul><ol start="3"><li>Form Components</li></ol><ul><li>button</li><li>checkbox</li><li>input (serves as a native component only in focus)</li><li>picker-view</li><li>textarea (native component)</li></ul><ol start="4"><li>Navigators</li></ol><ul><li>navigator</li></ul><ol start="5"><li>Media Components</li></ol><ul><li>image</li><li>audio</li><li>video (native component)</li><li>camera (native component)</li></ul><ol start="6"><li>Map (native component)</li><li>Canvas (native component)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“section”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“section__title”</span>&gt;</span>flex-direction: row<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“flex-wrp”</span> <span class="attr">style</span>=<span class="string">“flex-direction:row;”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“flex-item</span> <span class="attr">bc_green</span>”&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“flex-item</span> <span class="attr">bc_red</span>”&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">“flex-item</span> <span class="attr">bc_blue</span>”&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Q-Can-I-customize-my-own-component"><a href="#Q-Can-I-customize-my-own-component" class="headerlink" title="Q: Can I customize my own component?"></a>Q: Can I customize my own component?</h4><p>Yes, you can. If you compare WXML to HTML, you can think of custom components as web components. <a href="https://developers.weixin.qq.com/miniprogram/en/dev/framework/custom-component/wxml-wxss.html" target="_blank" rel="noopener">custom-component reference</a></p><h4 id="Q-Can-web-front-end-code-run-in-Mini-Program-Conversely-can-Mini-Program-code-run-in-a-web-browser"><a href="#Q-Can-web-front-end-code-run-in-Mini-Program-Conversely-can-Mini-Program-code-run-in-a-web-browser" class="headerlink" title="Q: Can web front-end code run in Mini Program? Conversely, can Mini Program code run in a web browser?"></a>Q: Can web front-end code run in Mini Program? Conversely, can Mini Program code run in a web browser?</h4><p>Unfortunately, both answers are NO. Although WXML/WXSS is similar to HTML/CSS at first glance, but they are still different. However, the transition from Web development to Mini Program development involves a low cost for front-end developers. Additionally, developers can use isomorphic frameworks/tools like <a href="https://github.com/wechat-miniprogram/kbone" target="_blank" rel="noopener">kbone</a> to make web code run in Mini Program without any changes.</p><h4 id="Q-If-I-want-to-use-functionalities-like-scanCode-Login-Network-Request-WebSocket-WeChat-Pay-getUserInfo-setNavigationBarTitle-setBackgroundColor-createAnimation-etc-How-do-I-do-that"><a href="#Q-If-I-want-to-use-functionalities-like-scanCode-Login-Network-Request-WebSocket-WeChat-Pay-getUserInfo-setNavigationBarTitle-setBackgroundColor-createAnimation-etc-How-do-I-do-that" class="headerlink" title="Q: If I want to use functionalities like scanCode, Login, Network Request, WebSocket, WeChat Pay, getUserInfo, setNavigationBarTitle, setBackgroundColor, createAnimation, etc. How do I do that?"></a>Q: If I want to use functionalities like scanCode, Login, Network Request, WebSocket, WeChat Pay, getUserInfo, setNavigationBarTitle, setBackgroundColor, createAnimation, etc. How do I do that?</h4><p>Yes, Mini Program provides plenty of APIs to complete these features. <a href="https://developers.weixin.qq.com/miniprogram/en/dev/api/" target="_blank" rel="noopener">API reference</a></p><h4 id="Q-How-does-Mini-Program-work-in-runtime-Is-Mini-Program-running-in-a-WebView"><a href="#Q-How-does-Mini-Program-work-in-runtime-Is-Mini-Program-running-in-a-WebView" class="headerlink" title="Q: How does Mini Program work in runtime? Is Mini Program running in a WebView?"></a>Q: How does Mini Program work in runtime? Is Mini Program running in a WebView?</h4><p>The runtime environment of Mini Program can be divided into a rendering layer and a logic layer. WXML templates and WXSS styles are used in the rendering layer and JavaScripts logic in the logic layer. These two layers are managed via two threads: the rendering layer renders its interfaces using WebView threads, while the logic layer runs the JavaScripts with JsCore threads.</p><p>Basically, the two threads(WebView and JsCore) run in the same time, and when they need to communicate with each other, all the communication will be transferred via the WeChat app(refer to “Native” in the following picture). For example, when <code>setData</code> is called in js logic in order to update the page display with new data, WeChat app will be responsible for sending the data from JsCore thread to WebView thread.</p><img src="/img/everything-you-would-like-to-know-about-wechat-mini-program/runtime.png" alt="Runtime" style="width:600px"><p>The underlying implementations of the Logic Layer and Rendering Layer vary by environment.</p><table><thead><tr><th>Runtime Environment</th><th>Logic Layer</th><th>Rendering Layer</th></tr></thead><tbody><tr><td>iOS</td><td>JavaScriptCore</td><td>WKWebView</td></tr><tr><td>Android</td><td>V8m</td><td>Chromium custom kernel(self-developed engine)</td></tr><tr><td>WeChat DevTools</td><td>NWJS</td><td>Chrome WebView</td></tr></tbody></table><h4 id="Q-Why-Mini-Program-uses-this-kind-of-two-threads-technic-instead-of-just-using-WebView"><a href="#Q-Why-Mini-Program-uses-this-kind-of-two-threads-technic-instead-of-just-using-WebView" class="headerlink" title="Q: Why Mini Program uses this kind of two-threads technic instead of just using WebView?"></a>Q: Why Mini Program uses this kind of two-threads technic instead of just using WebView?</h4><p>We know that, in web front-end development, rendering threads and scripting threads are mutually exclusive, that is to say, UI rendering and JavaScripts run alternately in the same thread, so long-time script running may make a page unresponsive.</p><p>So Mini Program uses a two-thread model in order to make the page respond faster. Many optimizations have been made to Mini Program to reduce data transfer between the two threads. Meanwhile, the rendering layer at the bottom of the page stack is gradually collected when the number of layers becomes high.</p><p>On the other hand, the pattern of running Mini Program code in separate threads provides better security performance, e.g. displaying open-data components in a manner that ensures user privacy.</p><h4 id="Q-What-is-the-mechanism-of-Mini-Programs-for-caching-and-updating"><a href="#Q-What-is-the-mechanism-of-Mini-Programs-for-caching-and-updating" class="headerlink" title="Q: What is the mechanism of Mini Programs for caching and updating?"></a>Q: What is the mechanism of Mini Programs for caching and updating?</h4><p>For caching, when a user first launches a Mini Program, all resources related to the user interface are downloaded to WeChat’s local storage. As this increases the storage space occupied by WeChat, the maximum size of a single file package that developers can upload is limited to 2MB, with the total size of all packages not exceed 8 MB. In such a case, developers are encouraged to build Mini Program into different sub-packages and load them as needed.</p><p>For updating, Case 1: sometimes Mini Program updates when it is deactivated, WeChat app will check at several time points if the new version of Mini Program exists locally, if yes, the Mini Program will be automatically updated to the latest version in next launch. It may take at most 24 hours to send the new version data to all the users(Updates timing is uncertain, in my experience, it takes only minutes). Case 2: sometimes Mini Program checks updates when cold startup, if a new version exists, the code package of the new version will be downloaded asynchronously and it will be started with the local client package, which means the new version of the Mini Program will not be applied until the next cold startup.</p><h4 id="Q-What-are-the-limitations-of-developing-Mini-Program"><a href="#Q-What-are-the-limitations-of-developing-Mini-Program" class="headerlink" title="Q: What are the limitations of developing Mini Program?"></a>Q: What are the limitations of developing Mini Program?</h4><p>The functionality provided by default Mini Program framework is powerful, most of UI and features that can be implemented on the web applications can be implemented on Mini Program.</p><p>However, to be honest, the development experience of Mini Program is not so good at first. Due to some technical restrictions like the absence of DOM APIs and limited language set, developers are not able to use modern front-end libraries like jQuery, React, etc.</p><h4 id="Q-I-don’t-want-to-use-the-default-framework-is-there-any-other-choice"><a href="#Q-I-don’t-want-to-use-the-default-framework-is-there-any-other-choice" class="headerlink" title="Q: I don’t want to use the default framework, is there any other choice?"></a>Q: I don’t want to use the default framework, is there any other choice?</h4><p>Yes, thanks to the active community, we now have dozens of frameworks built for you to write Mini Programs using modern web languages. Here are some examples: TinaJS(simply based on the default framework), Wepy(modern, in a component way), MPVue(for VueJS developers), Taro(for React developers). Taro is the one I use the most, it lets you write Mini Program entirely in React way, and the app code you write can be compiled to Web, WeChat Mini Program or even for react native apps(with single code base).<br>Here is a good article about frameworks: <a href="https://medium.com/le-wagon/wechat-mini-programs-which-development-framework-choose-in-2018-6ae493d6fea0" target="_blank" rel="noopener">WeChat mini programs — which development framework choose in 2018?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Product-Positioning&quot;&gt;&lt;a href=&quot;#Product-Positioning&quot; class=&quot;headerlink&quot; title=&quot;Product Positioning&quot;&gt;&lt;/a&gt;Product Positioning&lt;/h2&gt;&lt;p&gt;WeChat Mini Programs are a new way of connecting users and services. They are easy to access and share on WeChat, delivering an excellent user experience.&lt;/p&gt;
&lt;h2 id=&quot;What-are-the-differences-between-WeChat-js-sdk-weui-and-Mini-Program&quot;&gt;&lt;a href=&quot;#What-are-the-differences-between-WeChat-js-sdk-weui-and-Mini-Program&quot; class=&quot;headerlink&quot; title=&quot;What are the differences between WeChat js-sdk, weui, and Mini Program.&quot;&gt;&lt;/a&gt;What are the differences between WeChat js-sdk, weui, and Mini Program.&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/en/OA_Web_Apps/JS_SDK.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WeChat js-sdk&lt;/a&gt; is a web development kit based on WeChat provided by WeChat public platform for web developers. By using WeChat js-sdk, web developers can effectively use the capabilities of WeChat to take photos, select pictures, voice, location and other mobile phone systems, and directly use WeChat sharing, scan, card coupons, payment and other WeChat-specific capabilities to provide better web experience for WeChat users. You can think of WeChat js-sdk as our LIFF.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://weui.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;weui&lt;/a&gt; is a UI library by WeChat official design team. weui has &lt;a href=&quot;https://github.com/Tencent/weui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;an ordinary web (HTML/CSS/JS) version&lt;/a&gt; and &lt;a href=&quot;https://github.com/Tencent/weui-wxss/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a Mini Program version&lt;/a&gt;. Basically, it contains only styles and has no functionality of WeChat js-sdk.&lt;/p&gt;
&lt;p&gt;Mini Program is a more advanced solution, which takes one step forward from an ordinary mobile Web page. As you know, Mini Program provides a set of languages to let developers build more powerful apps within WeChat platform. The merits(from the user and developer perspective) are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast loading&lt;/li&gt;
&lt;li&gt;More powerful capabilities&lt;/li&gt;
&lt;li&gt;Native experience&lt;/li&gt;
&lt;li&gt;Easy and secure WeChat data exposure&lt;/li&gt;
&lt;li&gt;Efficient and simple development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details – &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/en/dev/framework/quickstart/#About-Mini-Programs%5D(https://developers.weixin.qq.com/miniprogram/en/dev/framework/quickstart/%23About-Mini-Programs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;About Mini Programs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="Mini Program" scheme="http://ianwith.github.io/tags/Mini-Program/"/>
    
  </entry>
  
  <entry>
    <title>Photos of Australia</title>
    <link href="http://ianwith.github.io/2018/08/19/photos-of-australia/"/>
    <id>http://ianwith.github.io/2018/08/19/photos-of-australia/</id>
    <published>2018-08-19T04:10:00.000Z</published>
    <updated>2020-06-26T16:50:18.876Z</updated>
    
    <content type="html"><![CDATA[<img src="/img/photos-of-australia/P6160199.jpg" alt style="border:0;width:882px"><a id="more"></a><img src="/img/photos-of-australia/P6160175.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/P6160201.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/P1011077.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/GOPR0119.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF9592.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF9479.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF9475.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF9311.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF8820.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF8641.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF8426.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF9749.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF8193.jpg" alt style="border:0;width:882px"><img src="/img/photos-of-australia/DSCF7940.jpg" alt style="border:0;width:882px">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/img/photos-of-australia/P6160199.jpg&quot; alt style=&quot;border:0;width:882px&quot;&gt;
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
      <category term="photos" scheme="http://ianwith.github.io/tags/photos/"/>
    
      <category term="photography" scheme="http://ianwith.github.io/tags/photography/"/>
    
      <category term="australia" scheme="http://ianwith.github.io/tags/australia/"/>
    
      <category term="southern hemisphere" scheme="http://ianwith.github.io/tags/southern-hemisphere/"/>
    
      <category term="travel" scheme="http://ianwith.github.io/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>Year 2017</title>
    <link href="http://ianwith.github.io/2018/01/07/year-2017/"/>
    <id>http://ianwith.github.io/2018/01/07/year-2017/</id>
    <published>2018-01-07T10:30:07.000Z</published>
    <updated>2020-06-26T16:50:18.877Z</updated>
    
    <content type="html"><![CDATA[<p>2017最喜欢的电影<br>奇跡<br>入围：海よりもまだ深く，Manchester by the Sea，Dangal，ゴールデンスランバー，Begin Again</p><p>2017最喜欢的电视剧<br>ごめんね青春！<br>入围：カルテット，ロングバケーション，This Is Us Season 1</p><a id="more"></a><p>2017最喜欢的综艺<br>中国有嘻哈</p><p>2017最喜欢的图书<br>强风吹拂</p><p>2017最喜欢的专辑<br>Swallow Up The Moon<br>入围：Neon Golden，The Halifax Pier，Ribbon，COLORS，我们不知道，收敛水</p><p>2017最喜欢的单曲<br>空に星が綺麗<br>入围：チェリー，东京下雨了，哪一位上帝会原谅我们呢，玛丽，Miss Shanghai，Lost Stars，Never，What Will I Do</p><p>2017最喜欢的音乐人<br>α·Pav<br>入围：DEPAPEPE，Jony J</p><p>2017最喜欢的LIVE<br>张尧《我们不知道》新专辑首发全国巡演第三季<br>德国传奇独立乐队 The Notwist 首次中国巡演</p><p>2017最喜欢的家庭料理<br>南瓜意面，虾仁滑蛋，南瓜香菇焖饭，中华汤料味面，雪平锅寿喜锅味面</p><p>2017最喜欢的日料店<br>传心居酒屋，极北海道</p><p>2017最喜欢的西餐店<br>Restaurant Y，Paradox</p><p>2017最喜欢的中餐店<br>面帮袁，屋里厢</p><p>2017旅行中最喜欢的场景<br>乔治市升旗山上看城市夜景，清迈骑摩托车载着cheriko，海参崴坐火车到市中心途中</p><p>2017生活中最喜欢的场景<br>和cheriko去图书馆自习，吃奶油炖菜看中国有嘻哈，秋天在三里屯使馆区散步</p><p>2017学会的厨艺<br>cake，烤鸡，葱油拌面，厚蛋烧，黄金炒饭，卷饼，三明治</p><p>2017新添的厨具<br>平底锅，厚蛋烧锅，阿拉丁烤箱，yoshikawa雪平锅，staub珐琅锅</p><p>2017去过的城市<br>哈尔滨，上海，吉隆坡，槟城，兰卡威，清迈，海参崴</p><p>2017看过的美术馆或展览<br>红砖美术馆的冬末和夏末，国家博物馆卢浮宫的创想，尤伦斯当代艺术中心入时，今日美术馆伊藤润二，良仓生活方式大赏，北京国际设计周若干地点</p><p>2017学会的运动技能<br>滑雪level 0</p><p>2017新添的电子设备<br>FUJIFILM X-T20，iPhone X，B&amp;O H8</p><p>2017语言学习<br>学习日语，看完标日初级上下，新编1，参加n2考试</p><p>2017工作的变化<br>5月初搬迁到新工区，10月份开始负责团队</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017最喜欢的电影&lt;br&gt;奇跡&lt;br&gt;入围：海よりもまだ深く，Manchester by the Sea，Dangal，ゴールデンスランバー，Begin Again&lt;/p&gt;
&lt;p&gt;2017最喜欢的电视剧&lt;br&gt;ごめんね青春！&lt;br&gt;入围：カルテット，ロングバケーション，This Is Us Season 1&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>海参崴电子签攻略与简单游记</title>
    <link href="http://ianwith.github.io/2017/10/21/vladivostok-evisa-guide/"/>
    <id>http://ianwith.github.io/2017/10/21/vladivostok-evisa-guide/</id>
    <published>2017-10-21T12:13:37.000Z</published>
    <updated>2020-06-26T16:50:18.877Z</updated>
    
    <content type="html"><![CDATA[<p>出行海参崴是在国庆期间。到达时是当地的清晨，我乘坐了当日第一班从机场到市区的express train，路过了树林、草地、乡村房屋和海边。在秋日的明媚阳光下，植被蒙上了层次不同的暖色调，窗外移动的景色成为了心中最心仪的风景。</p><img src="/img/vladivostok-evisa-guide/ocean_view_from_train_window.jpg" alt="Ocean view from train window" style="width:882px"><a id="more"></a><p>小城依山傍水，不繁华却很漂亮，文化独立而完整。与西边接壤的哈尔滨有完全不同的出行体验。虽在远东地区，却可以让人有去达欧洲国家的新鲜感。</p><p>海参崴很适合临时起意的出行，是少有的秒出签证的旅行地。通常来说，北京飞单程价格只需要三位数。俄罗斯的这项电子签证政策刚出不久，非常便利但还不够完善，网上已有的中文攻略只有寥寥几篇，自己在出行前也遇到了不少坑，故写在这里供参考。</p><h2 id="电子签"><a href="#电子签" class="headerlink" title="电子签"></a>电子签</h2><p>大概从2017年8月份起，海参崴自由港开始实施电子签证。签证免费签发。关于电子签，你需要知道：</p><ol><li>官网 <a href="https://evisa.kdmid.ru/" target="_blank" rel="noopener">Processing of an E-visa to visit the free port of Vladivostok - Consular department of MFA of the Russian Federation</a>。</li><li>需要提前4天申请签证。就我的体验来说，出签是很快，基本上一个小时以内就可以拿到受理结果。</li><li>只能在海参崴出入境。切记不要尝试在俄罗斯其他城市转机，至少我去的时候还不允许这样做。</li><li>持有电子签证在俄罗斯联邦停留时间不超过8天。据说只能在海参崴所在的行政区，即滨海边疆区内活动。我没有去其他地方，建议去的时候要了解好最新的政策。</li><li>入境时可能会检查是否购买医疗保险。我在入境的时候没有被检查，以防万一可以提前买好保险。</li></ol><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>当地居民大多不会说英语，因此准备好翻译App很重要，Google Translate或有道翻译官均可。如果你能在出发前了解一些西里尔字母，那看到一些简单的俄语单词或许就能猜到意思了。另外，手机上可以提前调出俄语键盘，查单词，查地名都很需要。我在等公交的时候就用手机翻译和当地的爷爷尬聊了很久。当地人虽然不苟言笑，但还是会很热心的帮助你的。</p><p>图为在寒风中用翻译卡片请卖热狗的阿姨帮我加热 :P</p><img src="/img/vladivostok-evisa-guide/google_translate.jpg" alt="Google translate" style="width:882px"><h2 id="银行卡"><a href="#银行卡" class="headerlink" title="银行卡"></a>银行卡</h2><p>银联卡UnionPay在当地不太好用，只有少数商家支持刷银联，并且商场的ATM机就算标明了支持UnionPay，也存在取不出钱的情况。海参崴机场的ATM是可以用银联的，所以最好在机场就取好现金。以防万一请提前备好Visa/Master。我出发前兑换了1万左右卢布，大概3天的开销，国内的中国银行和工商银行可以取卢布。</p><h2 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h2><p>从海参崴机场VVO到市区的路程是挺远的，如果打车的话，大概需要1000卢布。最经济快捷的方式是坐机场快轨express train，单程230卢布，但是机场快轨一天只有5班，你可以从VVO机场官网 <a href="http://vvo.aero/en/index.html" target="_blank" rel="noopener">Международный аэропорт Владивосток</a> 查到相关信息。下面是我去当天的机场快轨的时刻表：</p><img src="/img/vladivostok-evisa-guide/timetable_of_the_airport_express.jpg" alt="Timetable of the airport express" style="width:882px"><p>在海参崴市区没有地铁，最方便公共交通就是公交，每人21卢布，下车时交给司机，司机可以找零。公交车运行时段通常是从早上7点到晚上9点。早上9点和晚上6点左右是上下班高峰期，能避开最好。需要注意的是，公交车的时间间隔可能很长，所以提前了解每路公交的发车间隔会很有帮助。一些小型公交车可能不会报站，需要盯着点地图别坐过站了。在海参崴需要用到的地图App：</p><ol><li>首先是Google Map。</li><li>2GIS是一款离线地图App，它提供的信息更本地化更加详细，商店的地址，电话，楼层信息都会有。我也经常用它来查询线路。</li><li>Yandex.Maps同样非常好用。Yandex家的UI风格我很喜欢。相比2GIS，它还能实时显示公交车位置，每辆公交行驶到哪里一目了然。觉得它提供的公交线路更佳准确。</li><li>当你等不到公交的时候，可以用Yandex.Taxi打车。半小时以内的车程大概200-300卢布。</li><li>我用的最多的打车App还是Maxim，会比Yandex.Taxi稍微便宜一些。</li></ol><img src="/img/vladivostok-evisa-guide/useful_apps.PNG" alt="Useful apps" style="width:382px"><h2 id="玩"><a href="#玩" class="headerlink" title="玩"></a>玩</h2><p><a href="http://vladivostok.travel/en/" target="_blank" rel="noopener">Discover Vladivostok: Tourist guide - the city of Vladivostok and beyond.</a> 这里几乎可以找到关于海参崴的一切，收录了游览，美食，住宿，购物等各方面的信息。国内的攻略常提到的景点不外乎火车站，灯塔，С-56，但海参崴的魅力远不止在这些。建议参考网站中为游客定制的不同主题的游览路线，你能找到当地居民爱去的餐厅，博物馆，歌剧院。如果是八九月份出行的话，还能参与当地一年一度的音乐节，马拉松等活动。</p><p>我住的是Airbnb，房子在居民区，好处是可以体验到当地居民的日常生活，房东是Airbnb金牌房东，经常在各地旅行英语很好，非常贴心的准备了地图信息，很关注我们的旅行体验，临走时还送给我小礼品。</p><img src="/img/vladivostok-evisa-guide/tour_map_provided_by_host.jpg" alt="Tour map provided by host" style="width:882px"><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>市区内如果要寄存行李，最方便的是在火车站。可以询问火车站工作人员。</p><p>商场一般晚上9点就关门了，晚上街道上人很少，车开得很快，要注意安全。</p><p>耳鸣严重的如果乘坐俄罗斯航空，最好带好航空耳塞，从上飞机就开始嚼东西。</p><p>秋季到冬季时天气变化很快，第一日还阳光满满，后来突然的降温让小城笼罩在冬日的凛冽寒风中，没有帽子羽绒服会很艰难。</p><img src="/img/vladivostok-evisa-guide/the_russky_bridge.jpg" alt="The russky bridge" style="width:882px">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出行海参崴是在国庆期间。到达时是当地的清晨，我乘坐了当日第一班从机场到市区的express train，路过了树林、草地、乡村房屋和海边。在秋日的明媚阳光下，植被蒙上了层次不同的暖色调，窗外移动的景色成为了心中最心仪的风景。&lt;/p&gt;
&lt;img src=&quot;/img/vladivostok-evisa-guide/ocean_view_from_train_window.jpg&quot; alt=&quot;Ocean view from train window&quot; style=&quot;width:882px&quot;&gt;
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
      <category term="travel" scheme="http://ianwith.github.io/tags/travel/"/>
    
      <category term="journal" scheme="http://ianwith.github.io/tags/journal/"/>
    
      <category term="evisa" scheme="http://ianwith.github.io/tags/evisa/"/>
    
      <category term="russia" scheme="http://ianwith.github.io/tags/russia/"/>
    
  </entry>
  
  <entry>
    <title>Modular and Reusable CSS</title>
    <link href="http://ianwith.github.io/2017/09/29/modular-and-reusable-css/"/>
    <id>http://ianwith.github.io/2017/09/29/modular-and-reusable-css/</id>
    <published>2017-09-29T13:21:32.000Z</published>
    <updated>2020-06-26T16:50:18.876Z</updated>
    
    <content type="html"><![CDATA[<p>This article is about the CSS Architecture. Writing modular CSS is always the most important, but also difficult thing. I believe in ideas that a good CSS Architecture should be predictable, reusable, maintainable, and scalable. The way how we structure our CSS has evolved over the years. We can write powerful and maintainable CSS nowadays with the power of open source community. I have tried several different approaches, The following are some of them.</p><a id="more"></a><p>Before we get started, Let’s take a look at the big picture about structuring web pages. At the very first, based on how things actually works in Browser, we separated our pages in three layers: Content - HTML, Presentation - CSS, Behaviour - JS. It’s hard to say this is still the best practice. We now have new standards and tools help us make modules and components, based on product’s features.</p><img src="/img/modular-and-reusable-css/example_block.png" style="border:0" alt="Example block"><p>I would like to take this block for demonstration through this article.</p><h2 id="OOCSS-or-SMACSS-or-BEM"><a href="#OOCSS-or-SMACSS-or-BEM" class="headerlink" title="OOCSS or SMACSS or BEM"></a>OOCSS or SMACSS or BEM</h2><p>They are probably the earliest CSS methodologies been proposed to bring order to large CSS files. These three concepts share common goals, though they have different emphasis and take different principles and approaches. Each of them is more of a guideline than rule for writing CSS.</p><p><strong>OOCSS</strong> refers to Object-oriented CSS. It’s based on two main principles:</p><ol><li>Separate structure and skin</li><li>Separate container and content</li></ol><p>For the first one, the structure is about the layout of elements, while skin defines what they look like. Properties include width, height, margin, padding are the layout. Others like font, color are the skin.</p><p>For the second one, containers can be represented by classes which define the object structure. Content are often nestled within containers. Content elements refer to elements such as images, paragraphs.</p><p>The objective of OOCSS is reusing styles. So that the classes should not dependent on particular elements. However, it might increase the number of classes attached to a single element. The code may looks like:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image image-small image-loaded"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SMACSS</strong> stands for Scalable and Modular Architecture for CSS. The core of SMACSS is categorizing CSS rules. There are five types of categories: Base, Layout, Module, State and Theme. Each category has certain guidelines.</p><p>For me, state rules are a little bit confusing. According to author of SMACSS, state rules are ways to describe how our modules or layouts will look when in a particular state. Is it hidden or expanded? Is it active or inactive? The Author also offers a naming convention for working with these rules, for example, l- prefix for Layout rules, is- as in is-hidden for State.</p><p>SMACSS is an overall guide for organizing all your CSS rules, from layout to state. This is a short example:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-image is-loaded"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>BEM</strong> is the most popular of the three originated at Yandex. It stands for Block, Element, Modifier. The idea is to divide the user interface into independent blocks. The most common rule we used for naming BEM entities follow the structure <code>block-name__element-name--modifier-name</code>. This is called Two Dashes style. There are also alternative naming styles. The most important thing is, make entity names unambiguous and easy to understand.</p><p>With BEM, we are able to quickly understand the relationship between elements. It helps everyone working on the same project share syntax and code. In my practice, sometimes naming of classes itself might be a difficult thing.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media__image media__image--loaded"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media__content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The above three which are frequently mentioned together can be applied on their own or combined with other methodologies. Each of these approaches defines convention for writing structured CSS, but neither of them solves the problem that all class names live in the global scope. The conventions relies on the developer to conform to, and it’s difficult in large projects.</p><h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>With JavaScript Module ecosystem grows rapidly these years. We now have tools to solve the CSS global naming problem. Here comes CSS Modules.</p><blockquote><p>A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.</p></blockquote><p>Using CSS Modules means adding a process in build step, usually with webpack and css-loader, that generate a global unique name for each CSS class.</p><p>The top benefit of CSS Modules is that, it gives us a new way to structure our project. Instead of organizing CSS and JS separately, we break down pages into components. Components can be formed of it’s own JS and CSS, which are local-scoped and reusable.</p><p>I started using CSS Modules a year ago. It helps me break styles down into pieces, yet it’s composable, and makes writing isolated components easier. Since all styles are scoped to particular component. There is no global namespace pollution and no more conflicts. I am inspired a lot and learned the way to build UI by switching to Component-Based Thinking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- components</span><br><span class="line">  - MediaImage</span><br><span class="line">    - index.js</span><br><span class="line">    - index.css</span><br><span class="line">  - MediaContent</span><br><span class="line">    - index.js</span><br><span class="line">    - index.css</span><br></pre></td></tr></table></figure><h2 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h2><p>styled-components is one of the best CSS-in-JS solutions. With styled-components, you are able to write actual CSS rules in a JS file, instead of converting to JS objects. It looks something like this:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Media = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: block;</span></span><br><span class="line"><span class="string">  /* ... */</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> MediaImage = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;props =&gt; props.loaded &amp;&amp; css`</span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="css">    <span class="selector-tag">opacity</span>: 1</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="css">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">  /* ... */</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> MediaContent = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  /* ... */</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MediaBlock = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Media&gt;</span><br><span class="line">    &lt;MediaImage loaded=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line">    &lt;MediaContent /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Media&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>styled-components started at the point that, removing class names. If you are using React and CSS-Modules, you do this <code>&lt;div className={css.mediaImage)}&gt;&lt;/div&gt;</code>. This <code>className</code> plays the role of a mapping from stylesheets to elements. Removing the mapping let us focus on styling each single component, without worrying about naming classes, and those styles are tightly coupled with their components. Moreover, CSS in styled-components are more than just plain CSS, it is enhanced with features like nesting, dynamically adapting based on props, etc. Generally speaking, if you are putting CSS in JavaScript, you will have access to sharing variables and functions between CSS and JS, no more class names or separate CSS files, easy to modify a component’s style when state changes.</p><p>Recently, I shared my experience with styled-component. In my latest project, it helps me think of each element as a component, and that makes my component smaller and smaller. Instead of many CSS selectors and HTML tags, I have tiny reusable components. Then I plug them together to build complex user interfaces.</p><p>Some of my colleagues think that having two languages in one file is often a problem. I would prefer making components closer to their styles. Although separating CSS or not depends on your file organization style, structuring based on components is undoubtedly the most elegant way. Keep this in mind, always choose a technology that makes your code understandable and reusable before you start crafting.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article is about the CSS Architecture. Writing modular CSS is always the most important, but also difficult thing. I believe in ideas that a good CSS Architecture should be predictable, reusable, maintainable, and scalable. The way how we structure our CSS has evolved over the years. We can write powerful and maintainable CSS nowadays with the power of open source community. I have tried several different approaches, The following are some of them.&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="css" scheme="http://ianwith.github.io/tags/css/"/>
    
      <category term="architecture" scheme="http://ianwith.github.io/tags/architecture/"/>
    
      <category term="component" scheme="http://ianwith.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>Introducing Rexxar</title>
    <link href="http://ianwith.github.io/2017/06/05/introducing-rexxar/"/>
    <id>http://ianwith.github.io/2017/06/05/introducing-rexxar/</id>
    <published>2017-06-05T13:00:09.000Z</published>
    <updated>2020-06-26T16:50:18.876Z</updated>
    
    <content type="html"><![CDATA[<p>Rexxar is a mobile development solution for cross-platform application. We design Rexxar to be non-intrusive and lightweight. It is now open source with three libraries.</p><ul><li><a href="https://github.com/douban/rexxar-ios" target="_blank" rel="noopener">Rexxar iOS Container</a></li><li><a href="https://github.com/douban/rexxar-android" target="_blank" rel="noopener">Rexxar Android Container</a></li><li><a href="https://github.com/douban/rexxar-web" target="_blank" rel="noopener">Rexxar Web SDK</a></li></ul><p>The word Rexxar is originally from Warcraft. Rexxar is one of the warriors who had been formed from a union between orcs and ogres.</p><img src="/img/introducing-rexxar/logo_cartoon.png" alt="Logo cartoon" style="border:0;width:382px"><a id="more"></a><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Before Rexxar, we had several hybrid pages in Douban App, which were extremely simple and primitive. One common way to do this, is to open online web sites, which has disadvantages like slow speed and bad user experience. Another way, that is at the opposite extreme, we put the offline HTMLs into the app, and make ajax calls for the data, which speed up the initial loading but still lose the flexibility of web technology.</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>We mainly work on Douban App. With the expansion of product line, engineering team spent more and more time supporting both iOS, Android and Web. Meanwhile, we need to keep iterating fast. Delivering new feature every two weeks pushed us to think about efficiencies and costs.</p><p>Different features and pages are distributed in our App. Many of them user-generated articles and reviews. These are rich text pages which are more of content displaying than complex animation. It is appropriate to use web technologies.</p><p>When prioritize the benefits we want to gain from hybrid mobile app development, we found the top three was:</p><ul><li><strong>Fast development</strong></li><li><strong>Write once run everywhere</strong></li><li><strong>Hot code patch</strong></li></ul><h2 id="Core-Principles"><a href="#Core-Principles" class="headerlink" title="Core Principles"></a>Core Principles</h2><p>Studying existing frameworks is a good starting point. However, we found neither of them perfectly meets our needs. At the same time, we’d better have full control of the framework so that we could easily integrate hybrid pages into native pages without affecting existing development process or app bundle size.</p><p>Our Rexxar is not exactly a framework. It was designed to be <strong>non-intrusive</strong>, which means, developers can write Rexxar pages without even knowing the existing of the libraries. It’s just HTML, CSS and JavaScript code you write that could be run anywhere with a web browser and loosely coupled to native.</p><p>Rexxar is also <strong>lightweight</strong>. Instead of compiling JavaScript to native code or building our own rendering engine, we decided to use WebView to render our components. Through this way, we could concentrate on product development and make the most use of advanced web technology.</p><p>Although based on WebView, Rexxar is much <strong>powerful</strong>. we equip it with much more capabilities such as cache for static assets, native-like widgets, persistent storage, etc.</p><p>Moreover, Rexxar is <strong>scalable</strong>. We design two levels of granularity that are full-rexxar view and partial-rexxar view. The full-rexxar means that the full page is implemented and controlled by Rexxar, while the partial-rexxar view refers to a page which could not run independently and should be combined with some native part.</p><h2 id="Technical-Overview"><a href="#Technical-Overview" class="headerlink" title="Technical Overview"></a>Technical Overview</h2><p>Let’s take a deep look at Rexxar. The three fundamental concepts are: <strong>Route</strong>, <strong>Container</strong>, <strong>Web</strong>.</p><p>First comes <strong>Route</strong>. In a Rexxar app, each page can be identified by a unique URI. We serve the URI mapping in the routes.json. Client should check the routes periodically via GET request and save the latest version in the cache. At runtime, while receiving a URI call, client asks for routes to determine which page is about to open. This process is called Route, here is how it works.</p><img src="/img/introducing-rexxar/route.png" alt="Route" style="border:0;margin:40px auto;"><p><strong>Container</strong>, as its name would suggest, is a container for WebView. It is responsible for serving HTML pages locally. Moreover, Container intercepts all requests from WebView. For static assets such as JavaScript and CSS files, Container caches them for faster access on the next visit. For API requests, Container runs Decorator, which can be used to modify HTTP requests like adding an authorization header. Finally, Container gives web pages access to native features. These are called Extensions. Extensions can be divided into two types: UI widgets and data services.</p><img src="/img/introducing-rexxar/container.png" alt="Container" style="border:0;width:500px;margin:40px auto;"><p>The last part is <strong>Web</strong>. This part provides handy interfaces for developing Rexxar pages. We hides implementation detail of interaction with multiple platforms, so that developers just need to focus on product features. The way we write Rexxar pages is exactly the same as building SPAs: writing HTML &amp; CSS, making request to fetch data, and rendering data to DOM. You can choose any front-end framework you like as there is no limit. Additionally, you can easily access extensions for native-like user experience.</p><p>Let me further elaborate on extensions. Each extension is designed to be cross-platform, while providing unified interface. The code you write just works perfectly on web platform. For implementation of UI widgets and data services, I’m going to give one example of each type.</p><p>This is a widget implementing pull-to-refresh:</p><img src="/img/introducing-rexxar/widget.png" alt="Widget" style="border:0;width:500px;margin:40px auto;"><p>Another one is a GEO API:</p><img src="/img/introducing-rexxar/data_api.png" alt="Data API" style="border:0;width:500px;margin:40px auto;"><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>What does the workflow from development to deployment looks like?</p><p><strong>Development</strong> with Rexxar is easy, you set up a modern web application project as you usually do, and choose your favourite technology stack. At Douban, we are big fans of React.js. React is used with CSS-Modules to make reusable components. Meanwhile, we use webpack and gulp to process our modular projects, output HTML files and routes.json. As for debugging, start a local server and open pages in a browser like Chrome to inspect UI elements, test responsive design, etc. And even better, It is convenient to debug remotely, just switch to in-app mode, configure your application to use local routes.json and then you can check pages inside your application running on simulators or real devices. With hot module replacement enabled, you can reload your pages instantly every time you make a change without recompiling your app. It not only speed up your development times, but also helps designers quickly and easily review.</p><p>The key to <strong>deployment</strong> is to serve static HTMLs and the routes. Since Rexxar pages are static and don’t rely on server-side code, these HTMLs can be distributed instead of living on a server. Serving directly from a CDN unlocks speeds and performance. We take the following steps:</p><ul><li>Compiling source code, generating HTMLs and assets using our customized build system;</li><li>Publishing them to CDN;</li><li>Serving the routes.</li></ul><p>The routes in JSON format is as follows:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"remote_file"</span>: <span class="string">"https://path_to_cdn/dist/rexxar/demo-252452ae58.html"</span>,</span><br><span class="line">      <span class="attr">"uri"</span>: <span class="string">"douban://douban.com/rexxar_demo[/]?.*"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"partial_items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"remote_file"</span>: <span class="string">"https://path_to_cdn/dist/rexxar/demo-252452ae58.html"</span>,</span><br><span class="line">      <span class="attr">"uri"</span>: <span class="string">"douban://partial.douban.com/rexxar_demo/_.*"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that, after finishing development, you will need to fully test your changes before releasing it to your users. So, iterating on a pre-release branch is essential. Usually, QA engineers should tell you if it stable enough to publish.</p><img src="/img/introducing-rexxar/deployment.png" alt="Deployment" style="border:0;"><h2 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next"></a>What’s Next</h2><p>Rexxar brings the ease of web technologies into mobile application development and eliminates the cost and complexity of supporting multiple platforms. However, as we know, rendering with DOM is much slower than native components. Rexxar is not intent on being a replacement for iOS/Android development. After more than a year of experiment, we are convinced that it should be a great fit for your project in particular use cases. We are looking forward to your trial if it’s right for the job, and eager to hear your feedback.</p><p>By now, we enjoy the advantages of flexible delivery and rapid iteration that had never been achieved before, yet there are issues to be solved. The infrastructure is still incomplete. We will continuously invest in infrastructure in order to improve developer experiences. Future works may include creating a better release system, error monitoring and crash reporting tools. As our projects grow large, it is also necessary to dig deeper into performance and parallel development.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rexxar is a mobile development solution for cross-platform application. We design Rexxar to be non-intrusive and lightweight. It is now open source with three libraries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/douban/rexxar-ios&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rexxar iOS Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/douban/rexxar-android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rexxar Android Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/douban/rexxar-web&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rexxar Web SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The word Rexxar is originally from Warcraft. Rexxar is one of the warriors who had been formed from a union between orcs and ogres.&lt;/p&gt;
&lt;img src=&quot;/img/introducing-rexxar/logo_cartoon.png&quot; alt=&quot;Logo cartoon&quot; style=&quot;border:0;width:382px&quot;&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="rexxar" scheme="http://ianwith.github.io/tags/rexxar/"/>
    
      <category term="hybrid" scheme="http://ianwith.github.io/tags/hybrid/"/>
    
      <category term="mobile" scheme="http://ianwith.github.io/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>2016 简记</title>
    <link href="http://ianwith.github.io/2017/02/26/year-2016/"/>
    <id>http://ianwith.github.io/2017/02/26/year-2016/</id>
    <published>2017-02-26T03:25:17.000Z</published>
    <updated>2020-06-26T16:50:18.877Z</updated>
    
    <content type="html"><![CDATA[<p>2016上半年报名参加了吉他班，每天晚上回家都会练琴，因为进步很快得到了奖励，和小伙伴一起弹琴的感觉是新鲜的，那是迷恋民谣的一段时期。五月份的时候妈妈来北京给我过生日，带着老妈玩了三天，虽然很累但是非常开心，过了一个温馨的生日，留下了很多照片纪念。作为生日礼物妈妈给我织了两双袜子，超感动。上半年工作中Rexxar稍有成果，在雪球和滴滴分别做了分享，总体来说都很生涩，但第二场比第一场感觉更良好。</p><a id="more"></a><p>六月份的时候去了一次云南。最初想去是因为吉他课学了我会想起你，算是我完整弹唱的第一首歌，想看苍山洱海边。飞机飞昆明，逛了一天后火车去大理。最难忘的还是大理。大理的第一天是古城和苍山，现在依然清晰的记得在古城城墙上看到云层下的苍山的那刻惊艳。苍山山顶虽然寒冷但很美，溪水流淌野花遍地。古城的夜色来得很晚，晚上亦很热闹，住在青旅的室友看起来是在这边常住打工或怎样。第二天早早起床出发去租车，来这里最主要的行程就是两天的环海骑行。现在想来，那两天真是相当疯狂和悲惨。当然，沿路的景色相当之美，要是没有下雨的话会好的多。第一天沿环海西路到双廊，大部分的美景都在这一路，骑到后半路下起了大雨，在洱海北边的一家人家里勇敢的跑进去求避雨，家里只有老爷爷老奶奶，努力让他们觉得我不是坏人。最后到达双廊衣服湿透了，手机也湿到充不了电。第二天醒来拉开窗帘看见美丽的海，客栈老板提醒说你要不坐大巴回去，虽然并没有恢复体力，但我还是往前骑了。这一路基本都在下雨，裹着雨披疯狂赶路，没法看风景，幸运的是路上遇到了和我一样骑行的一个车队，互相追赶让人感觉不到孤单，停下休息的时候大家还打了招呼。骑到中午晒晒的太阳出来了，到了个镇上找到唯一的饭馆，老板装了一大碗饭和土豆丝却没胃口吃完。继续赶路，到大理新城的时候进入找路模式，到处在修路，在川流的汽车中骑行还是蛮危险的，好在找到了回去的那座桥，找到了环海西路几乎凭着毅力骑回了古城，在咖啡馆坐着休息了会后回到了火车站。回北京的那天因为雷雨飞机晚点，大概凌晨四点才到家。回来后皮肤因为晒伤恢复了好久。</p><p>之后几个月开始为自己的身体担心，开始每周会去游泳，也注意饮食。去公立医院的时候对医生的态度感到失望。对比之下印象深刻的是去瑞尔看牙的那位医生，交流的感觉像是能成为朋友一般。这段时间令我焦虑的事情变的越来越多，心情也就越来越糟糕。</p><p>九月初随team去了一次南京，参加JSConf，见到了厉害的前同事，那是难得的让我放松融入集体的旅行。期间也去了趟南大校园见了老同学。九月下入秋的时候和伙伴去了北京郊区京东大峡谷，整个景点很挫却有一处需要攀爬到达的岩石景色不错。十月份去了喇叭沟门，遇到些车祸小事故。下半年听了三场不错的Live，众乐纪，Mono，WEG。11月份为了让自己健康的吃早饭买了电饭煲，能有预约功能煮点东西很有幸福感。平安夜的晚上去小伙伴家party，买了些圣诞风楼圃甜点，吃火锅，看Love Actually，玩桌游，喜欢他家的开放式厨房和c手作胡萝卜圣诞树。公司的圣诞交换礼物环节，收到一盒饼干。Happy Day活动，是微信小程序的创意大赛，我们做的是关于豆瓣小组，得了二等奖，礼物是乐高。</p><p>元旦跨年在东北，这是一场充满中二感的冲动出行。心很大的三人没赶上火车，第一站就偏离了原来的目的地，坐了一晚的硬座，在抱怨和疲劳中走过了沈阳。来到哈尔滨之后心情慢慢好起来，在哈尔滨中央大街吃着冰棍闲逛，又去冰雪大世界玩冰看别人滑滑梯。元旦后某个周末去国博看了卢浮宫主题的展览。春节前最后一个周末TB去军都山滑雪，第一次尝到白色鸦片，第一次上斜坡眼看着速度越来越快不知如何减速就往后倒去，手杖离手，用双手在雪地里撑住才停下来，双手通红也没法站起来，生无可恋的坐在地上拍手，还被小伙伴用live photo记录下来做表情包，后来慢慢尝试几次之后就能小心地控制速度，最后的收获就是能划完初级道了。晚上回城后大家去吃了面帮袁，好评加满足。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016上半年报名参加了吉他班，每天晚上回家都会练琴，因为进步很快得到了奖励，和小伙伴一起弹琴的感觉是新鲜的，那是迷恋民谣的一段时期。五月份的时候妈妈来北京给我过生日，带着老妈玩了三天，虽然很累但是非常开心，过了一个温馨的生日，留下了很多照片纪念。作为生日礼物妈妈给我织了两双袜子，超感动。上半年工作中Rexxar稍有成果，在雪球和滴滴分别做了分享，总体来说都很生涩，但第二场比第一场感觉更良好。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Training Courses</title>
    <link href="http://ianwith.github.io/2016/03/16/front-end-training-courses/"/>
    <id>http://ianwith.github.io/2016/03/16/front-end-training-courses/</id>
    <published>2016-03-16T13:45:39.000Z</published>
    <updated>2020-06-26T16:50:18.875Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, Our team opened a series of front-end training courses inside the company. These courses aimed to teach everyone the basics of front-end programming skills. We encouraged all interested colleagues especially back-end developers, iOS developers, Android developers to enroll in the courses. By offering a series of lessons featured with lively lectures, real-world cases, and hands-on exercises, we covered many practical topics like <em>Basic HTML</em>, <em>SCSS Introduction</em>, <em>Exploring ECMAScript</em>, <em>Workflow of Front-end in Douban</em>, etc.</p><p>Front-end technologies are widely used in desktop and mobile applications. Learning and applying fundamental concepts benefits for enhancing the efficiency of development and cooperation.</p><a id="more"></a><p>My topic was the <em>Layouts for Mobile Screens</em>. Here is an outline of my presentation. Although the following demos are simple, they helped me recall W3C standards. We had a lot of fun with CSS.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents:"></a>Table of contents:</h2><h3 id="Media-Query"><a href="#Media-Query" class="headerlink" title="Media Query"></a>Media Query</h3><ul><li><p>Usage:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS media query on a link element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"(max-width: 800px)"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"example.css"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS media query within a stylesheet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Syntax:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">500px</span>)</span><br><span class="line">@media <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">500px</span>)</span><br><span class="line">media_<span class="attribute">type:</span> screen, print, tv, all</span><br><span class="line">media_<span class="attribute">feature:</span> min-width, max-width, min-height,  max-height</span><br></pre></td></tr></table></figure></li><li><p>Example</p><p data-height="275" data-theme-id="dark" data-slug-hash="VXYdbm" data-default-tab="css,result" data-user="ianwith" data-pen-title="media" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/VXYdbm/" target="_blank" rel="noopener">media</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul><h3 id="Fluid-Grids"><a href="#Fluid-Grids" class="headerlink" title="Fluid Grids"></a>Fluid Grids</h3><ol><li><strong>fixed width</strong></li></ol><ul><li><p>px + float</p><p data-height="275" data-theme-id="dark" data-slug-hash="BryVad" data-default-tab="css,result" data-user="ianwith" data-pen-title="px_float" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/BryVad/" target="_blank" rel="noopener">px_float</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li><li><p>px + inline-block</p><p data-height="275" data-theme-id="dark" data-slug-hash="zWxaGQ" data-default-tab="css,result" data-user="ianwith" data-pen-title="px_inlineblock" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/zWxaGQ/" target="_blank" rel="noopener">px_inlineblock</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul><ol start="2"><li><strong>percentage based</strong></li></ol><ul><li><p>% + float</p><p data-height="275" data-theme-id="dark" data-slug-hash="YaPvwG" data-default-tab="css,result" data-user="ianwith" data-pen-title="percent_float" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/YaPvwG/" target="_blank" rel="noopener">percent_float</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li><li><p>% + inline-block</p><p data-height="275" data-theme-id="dark" data-slug-hash="eMmKJX" data-default-tab="css,result" data-user="ianwith" data-pen-title="percent_inlineblock" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/eMmKJX/" target="_blank" rel="noopener">percent_inlineblock</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul><h3 id="Rem"><a href="#Rem" class="headerlink" title="Rem"></a>Rem</h3><ul><li><p>Syntax<br>px — Absolute Lengths<br>em — Relative Lengths (font size of the element)<br>rem — Relative Lengths (font size of the root element)</p></li><li><p>Example</p><p data-height="275" data-theme-id="dark" data-slug-hash="WzbyjK" data-default-tab="css,result" data-user="ianwith" data-pen-title="rem" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/WzbyjK/" target="_blank" rel="noopener">rem</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><ul><li><p>Properties applied to flex items</p><p data-height="275" data-theme-id="dark" data-slug-hash="gebKeo" data-default-tab="css,result" data-user="ianwith" data-pen-title="flex_box" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/gebKeo/" target="_blank" rel="noopener">flex_box</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li><li><p>Alignment along the main axis</p><p data-height="275" data-theme-id="dark" data-slug-hash="wmBXmX" data-default-tab="css,result" data-user="ianwith" data-pen-title="alignment" class="codepen">See the Pen <a href="https://codepen.io/ianwith/pen/wmBXmX/" target="_blank" rel="noopener">alignment</a> by Ian Gong (<a href="https://codepen.io/ianwith" target="_blank" rel="noopener">@ianwith</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, Our team opened a series of front-end training courses inside the company. These courses aimed to teach everyone the basics of front-end programming skills. We encouraged all interested colleagues especially back-end developers, iOS developers, Android developers to enroll in the courses. By offering a series of lessons featured with lively lectures, real-world cases, and hands-on exercises, we covered many practical topics like &lt;em&gt;Basic HTML&lt;/em&gt;, &lt;em&gt;SCSS Introduction&lt;/em&gt;, &lt;em&gt;Exploring ECMAScript&lt;/em&gt;, &lt;em&gt;Workflow of Front-end in Douban&lt;/em&gt;, etc.&lt;/p&gt;
&lt;p&gt;Front-end technologies are widely used in desktop and mobile applications. Learning and applying fundamental concepts benefits for enhancing the efficiency of development and cooperation.&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="css" scheme="http://ianwith.github.io/tags/css/"/>
    
      <category term="courses" scheme="http://ianwith.github.io/tags/courses/"/>
    
  </entry>
  
  <entry>
    <title>Interview at Douban</title>
    <link href="http://ianwith.github.io/2015/04/29/interview-at-douban/"/>
    <id>http://ianwith.github.io/2015/04/29/interview-at-douban/</id>
    <published>2015-04-29T14:11:16.000Z</published>
    <updated>2020-06-26T16:50:18.876Z</updated>
    
    <content type="html"><![CDATA[<p>这是豆瓣面试的杂记。</p><p>4月23日，拿到了豆瓣的offer。</p><p>清明节前看到招聘信息，就把简历投了过去，因为JD是社招，当时也没报希望能得到回复，几乎已经放弃找工作了。估计是电话出了问题，节前Ruby就回复我说电话打不通，于是换了个号码，节后联系Ruby约定面试时间。</p><a id="more"></a><p>大概是4月8号上午10点半，开始的第一次面试。豆瓣的面试，与其说面试，更像是聊天一样。没有问基础知识，没有问技术细节。我说了很多deviceBridge的内容，面试官似乎对这个经验比较感兴趣。很快，面完不到一个小时，就接到HR电话通知二面。</p><p>4月13日同样是上午10点半，面试官是豆瓣阅读技术负责人。开始聊了一些以前的项目，面试官有看过我的简历和博客，对春苗项目这块问的较多。之后问到豆瓣阅读的切页分页问题，这块答得思路不好。等到下午的时候，Ruby电话来说豆瓣产品的技术负责人要跟你聊一下，如果他觉得没问题，面完后想请你来一次北京。然后定了隔一天的周三。</p><p>4月15日本来约定的上午10点半的面试，因为面试官有会议的原因，推迟到下午。这一面不长，面试官开始说大概需要15分钟，问了毕业设计的情况，以及对豆瓣产品的理解。产品的问题说到了豆瓣笔记，之前也没准备，但答得过程中思路倒还清晰。面完后没多久，HR说刚才面试官对你评价挺好，请你来北京面试。预定了下个周三，考虑到下午面试状态不会很好，就定了上午的时间。HR姐姐贴心的帮忙安排住宿及行程。没想到三轮电面效率这么高，每次面完就能收到反馈。</p><p>4月22日来到北京，在兆维园区摸索了半天没找到A1区1门在哪，入住的酒店倒不是很远。第二天早上来到豆瓣，在楼道里的时候接到HR电话，提醒我面试时间，我刚好上了楼在找2016，一转头，就看到豆瓣的logo。豆瓣的环境挺敞亮文艺，在前台后面的一间玻璃小隔间里填完表，之前电面的第一位面试官过来跟我聊，我试着整理思路后再回答，面对面还是会比较拘谨，虽然这次多是聊天性质。后来是三面面试官，问了对前端前景看法，一些学的专业课，最后一道逻辑题，感觉答得不好。最后我提问环节，问了两个问题，面试官耐心解释了挺多。最后是HR面，这位HR声音沙哑，懒懒的样子，没有咄咄逼人询问身世性格。后来Ruby姐姐来了，简单问了几句对豆瓣使用和改进。休息小坐了一会，Ruby回来给我offer。玻璃会议室的外面，大家在整理着「台湾年会」的横幅。Ruby说你是近期最后一位面试的同学啦，我们明天要去台湾了。大概12点半不到，肚子已经咕噜咕噜响了。我说我再考虑下，不会太久，Ruby加了微信，叮嘱说注意安全，送我出门。有点遗憾没有参观一下豆瓣的办公区。</p><p>面完试从兆维园区走出来，首先给妈妈打了电话，说拿到offer了很开心。然后一直往北逛，找798，中午的天慢慢变热。下午4:30的火车，太赶了来不及见同学一面，在地铁上通话，隐约听他介绍了一个创业公司。</p><p>回到学校的第二天没怎么睡好。晚上和同班一起去梅操看电影，是「王牌特工」，人多到只能站着看。喜欢这样的露天电影，大家一起笑，鼓掌。学校的氛围真是舒适，晚上看完回寝室的路上，昏黄的灯光，微微的热风，边走边聊天，感受着美好的一天。</p><p>接下来几天，室友去了广州。因为豆瓣全员去了台湾，我也不用急着回复。这几天迷茫感有所增加，静不下心来的时候就会刷剧。事情总是有好有坏，好一阵坏一阵。对于这几个礼拜的豆瓣面试，我似乎从头到尾都比之前自信，隐隐知道会有offer，甚至最后可能会去吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是豆瓣面试的杂记。&lt;/p&gt;
&lt;p&gt;4月23日，拿到了豆瓣的offer。&lt;/p&gt;
&lt;p&gt;清明节前看到招聘信息，就把简历投了过去，因为JD是社招，当时也没报希望能得到回复，几乎已经放弃找工作了。估计是电话出了问题，节前Ruby就回复我说电话打不通，于是换了个号码，节后联系Ruby约定面试时间。&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
      <category term="interview" scheme="http://ianwith.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>春苗项目小结之deviceBridge的进化之路</title>
    <link href="http://ianwith.github.io/2015/03/04/chunmiao-summary-evolution-of-deviceBridge/"/>
    <id>http://ianwith.github.io/2015/03/04/chunmiao-summary-evolution-of-deviceBridge/</id>
    <published>2015-03-04T05:03:46.000Z</published>
    <updated>2020-06-26T16:50:18.873Z</updated>
    
    <content type="html"><![CDATA[<p>deviceBridge是我们连接WebView页面与Native App的桥梁，它实现了JS和NativeCode之间的相互通信。春苗移动端App是一个HybridApp，内嵌了Wap版的帖子详情页面，其中包含的许多功能逻辑需要和NA协作共同完成，这就需要一套完备的交互接口。为了说明deviceBridge的工作原理，我们挑选一个最复杂的需求“回复”来理一理整个流程。所谓一通百通，跑通了一个功能，其他的也就迎刃而解了。</p><img src="/img/chunmiao-summary-evolution-of-deviceBridge/reply_flow.png" alt="回复流程" style="width:882px"><p>这里主要来看前端JS的接口部分，Native端的处理代码就暂时忽略了。下面我就说说在编写这个JS脚本时候我的学习和优化过程。</p><a id="more"></a><p>##第一版<br>我们做了个简单的demo以确定NA与JS双方的交互方式。虽然了解到Android中addJavascriptInterface可以将接口注入到JS中，但是这种方式并不安全。所以我们采用伪协议的方式来实现相互间的通信。最开始的时候是这么做的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.deviceBridge = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">deviceBridge = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发起请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _doRequest: <span class="function"><span class="keyword">function</span> (<span class="params">action, args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reqData = &#123;</span><br><span class="line">            action: action,</span><br><span class="line">            args: args</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发起回复，NA调起回复框和键盘</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    causeReply: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY'</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(params);</span><br><span class="line">        <span class="keyword">this</span>._doRequest(action, args);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送回复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sendComment: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// request server api</span></span><br><span class="line">            <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回复结果状态通知NA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    replyStatus: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY_RESULT'</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(res.status);</span><br><span class="line">        <span class="keyword">this</span>._doRequest(action, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本只是实现了基本的接收发送消息的功能，它留下了很多问题：各个方法独立调用，流程没有有效衔接起来。当有多次请求时，无法辨别对应的哪个响应。</p><p>##第二版<br>加入回调逻辑，并为每个回调生成唯一标识的ID，防止流程混乱。iOS和Android采用不同的通信方式：Android利用prompt方式传参，消息可以被Java端WebChromeClient.onJsPrompt拦截到；iOS由于无法拦截prompt，继续采用伪协议通信。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.deviceBridge = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">deviceBridge = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成唯一的编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getReqID: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'_bd_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    initCallback: <span class="function"><span class="keyword">function</span>(<span class="params">callback, nReqID</span>) </span>&#123;</span><br><span class="line">        callbackMethodName = <span class="string">'callbackjs'</span> + nReqID;</span><br><span class="line">        <span class="built_in">window</span>[callbackMethodName] = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>[callbackMethodName] = <span class="literal">null</span>;</span><br><span class="line">            callback(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始请求，分别采用不同的通信方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _sendRequest: <span class="function"><span class="keyword">function</span> (<span class="params">action, args, callbackMethodName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> isAndroid = <span class="regexp">/Android/</span>.test(navigator.userAgent);</span><br><span class="line">        <span class="keyword">var</span> reqData = &#123;</span><br><span class="line">            action: action,</span><br><span class="line">            args: args</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData), <span class="string">"javascript:"</span> + callbackMethodName + <span class="string">"('%1$s')"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">                reqData.callback = callbackMethodName;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送请求入口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _doRequest: <span class="function"><span class="keyword">function</span> (<span class="params">action, args, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nReqID = <span class="keyword">this</span>.getReqID();</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            <span class="keyword">this</span>.initCallback(callback, nReqID);</span><br><span class="line">            <span class="keyword">this</span>._sendRequest(action, args, callbackMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._sendRequest(action, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发起回复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    causeReply: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY'</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(params);</span><br><span class="line">        <span class="keyword">this</span>._doRequest(action, args, <span class="keyword">this</span>.sendComment);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向服务器发送回复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sendComment: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// request server api</span></span><br><span class="line">            <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回复结果状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    replyStatus: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">'REPLY_RESULT'</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">JSON</span>.stringify(res.status);</span><br><span class="line">        <span class="keyword">this</span>._doRequest(action, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们可以这么用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> TapEvents(&#123;</span><br><span class="line">    container: $(<span class="string">'#pages-container'</span>),</span><br><span class="line">    preventDefault: <span class="literal">false</span>,</span><br><span class="line">    bind: &#123;</span><br><span class="line">        <span class="string">'reply'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isNa) &#123;</span><br><span class="line">                deviceBridge.causeReply(&#123;</span><br><span class="line">                    <span class="string">'parent_id'</span>: target.attr(<span class="string">'data-id'</span>), </span><br><span class="line">                    <span class="string">'parent_user'</span>: target.attr(<span class="string">'data-parent-name'</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发起后端数据API请求方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> send_reply = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/api/reply'</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        type: <span class="string">'post'</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        deviceBridge.replyStatus(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>整个流程的时序图大致是这样的：</p><img src="/img/chunmiao-summary-evolution-of-deviceBridge/method_sequence.png" alt="时序图" style="width:882px"><p>在换用prompt的时候，我们踩到一个坑，Android只能收到一次消息，后面的消息再也无法接收。这里要提醒的是，Android端别忘了confirm，不然就会阻塞了。</p><p>##第三版<br>添加全流程标识ID；加入命名空间，统一构建所有API方法；支持新需求：在NA端直接触发回复，回复框输入，之后将回复内容塞给JS。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isAndroid = <span class="regexp">/Android/</span>.test(navigator.userAgent);</span><br><span class="line">    <span class="keyword">var</span> callbackMethodName = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与NA约定的Action名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> cmdMap = &#123;</span><br><span class="line">        causeReply: <span class="string">"REPLY"</span>,</span><br><span class="line">        replyStatus: <span class="string">"REPLY_RESULT"</span>,</span><br><span class="line">        sendComment: <span class="string">"SEND"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> cmdPool = &#123;</span><br><span class="line">        <span class="string">"deviceBridge.device.causeReply"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">            doRequest(action, params, deviceBridge.call.sendComment);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"deviceBridge.call.sendComment"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = <span class="built_in">JSON</span>.parse(params);</span><br><span class="line">            <span class="keyword">if</span> (!args.actionID) &#123;</span><br><span class="line">                <span class="comment">// 如果是NA直接触发回复</span></span><br><span class="line">                args.actionID = getReqID();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">window</span>[<span class="string">'send_reply'</span>](args); <span class="comment">// request server api</span></span><br><span class="line">            &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"deviceBridge.result.replyStatus"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">action, params</span>) </span>&#123;</span><br><span class="line">            doRequest(action, params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getReqID</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'_bd_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initCallback</span> (<span class="params">callback, nReqID</span>) </span>&#123;</span><br><span class="line">        callbackMethodName = <span class="string">'callbackjs'</span> + nReqID;</span><br><span class="line">        <span class="built_in">window</span>[callbackMethodName] = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>[callbackMethodName] = <span class="literal">null</span>;</span><br><span class="line">            callback(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendRequest</span> (<span class="params">action, nReqID, args, callbackMethodName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reqData = &#123;</span><br><span class="line">            action: action,</span><br><span class="line">            actionID: nReqID,</span><br><span class="line">            args: args</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData), <span class="string">"javascript:"</span> + callbackMethodName + <span class="string">"('%1$s')"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                prompt(<span class="built_in">JSON</span>.stringify(reqData));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (callbackMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">                reqData.callback = callbackMethodName;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">window</span>.location = <span class="string">"chunmiao://#/"</span> + <span class="built_in">JSON</span>.stringify(reqData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doRequest</span> (<span class="params">action, args, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nReqID = getReqID();</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            initCallback(callback, nReqID);</span><br><span class="line">            sendRequest(action, nReqID, args, callbackMethodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sendRequest(action, nReqID, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册命名空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ns</span> (<span class="params">namespace, owner</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> names = namespace.split(<span class="string">"."</span>);</span><br><span class="line">        owner = owner || <span class="built_in">window</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> packageName = names[i];</span><br><span class="line">            owner[packageName] = owner[packageName] || &#123;&#125;;</span><br><span class="line">            owner = owner[packageName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 固化参数Action名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">currying</span> (<span class="params">fn, cmd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = [cmd];</span><br><span class="line">            args.push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bindFn</span> (<span class="params">cmdStr, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parts = cmdStr.split(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">var</span> method = parts.pop();</span><br><span class="line">        <span class="keyword">var</span> prefix = parts.join(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">var</span> namespace = ns(prefix);</span><br><span class="line">        namespace[method] = currying(fn, cmdMap[method]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">buildInterface</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> cmdPool) &#123;</span><br><span class="line">            bindFn(key, cmdPool[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildInterface();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们在向服务器发送数据请求的时候，也需要记住当前流程的ID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> send_reply = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actionID = params.actionID;</span><br><span class="line">    <span class="keyword">var</span> data = params.data;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/api/reply'</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        type: <span class="string">'post'</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            actionID: actionID,</span><br><span class="line">            status: data.status</span><br><span class="line">        &#125;);</span><br><span class="line">        deviceBridge.result.replyStatus(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>##后续优化</p><ol><li>优化回调函数，采用dispatch方法统一分发响应。</li><li>添加错误处理机制。</li><li>增加调试模式，方便前端在浏览器调试代码。<br>…</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;deviceBridge是我们连接WebView页面与Native App的桥梁，它实现了JS和NativeCode之间的相互通信。春苗移动端App是一个HybridApp，内嵌了Wap版的帖子详情页面，其中包含的许多功能逻辑需要和NA协作共同完成，这就需要一套完备的交互接口。为了说明deviceBridge的工作原理，我们挑选一个最复杂的需求“回复”来理一理整个流程。所谓一通百通，跑通了一个功能，其他的也就迎刃而解了。&lt;/p&gt;
&lt;img src=&quot;/img/chunmiao-summary-evolution-of-deviceBridge/reply_flow.png&quot; alt=&quot;回复流程&quot; style=&quot;width:882px&quot;&gt;

&lt;p&gt;这里主要来看前端JS的接口部分，Native端的处理代码就暂时忽略了。下面我就说说在编写这个JS脚本时候我的学习和优化过程。&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="chunmiao" scheme="http://ianwith.github.io/tags/chunmiao/"/>
    
      <category term="js" scheme="http://ianwith.github.io/tags/js/"/>
    
      <category term="native" scheme="http://ianwith.github.io/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>春苗项目小结之合作沟通篇</title>
    <link href="http://ianwith.github.io/2015/02/22/chunmiao-summary-cooperation/"/>
    <id>http://ianwith.github.io/2015/02/22/chunmiao-summary-cooperation/</id>
    <published>2015-02-22T11:58:53.000Z</published>
    <updated>2020-06-26T16:50:18.873Z</updated>
    
    <content type="html"><![CDATA[<p>##和UE沟通<br>在文库做两个项目过程中，都有被UE劈头痛批的经历，这是我在之前从未体验过的。我想了一下，出现这种沟通问题的原因在以下两个方面：</p><ol><li><p><strong>工作性质</strong>：这个要拿我之前在广研的经历来比较了，由于之前在邮箱做的是重构工作，和设计师走的很近，像是相亲相爱的一家人，从来没出现过这种问题。而现在不同了，我们FE是属于研发联盟，这意味着，做事的方式和流程都会有很大的不同。<br>具体一点说：做重构，我们和设计师直接沟通，（几乎）随时沟通，我们甚至可以跟设计师提出自己对某个设计的看法。而做研发，有两个重要的不同点，一是<strong>过程</strong>：开发之前，一份设计稿定稿并标注明了；开发之后上线之前，反馈UE走查确认效果；开发过程中，UE不会全程跟着你改。二是<strong>方式</strong>：UE不直接跟工程师沟通，而由PM充当中间人的角色。开发时发现缺什么图了，跟PM说，PM找UE补；交互设计有矛盾了，UE找PM确认，PM确认无误再给研发。少数情况下，页面中细小的细节，UE可以和研发直接沟通。  </p><a id="more"></a></li><li><p><strong>UI规范和细节标注</strong>：首先讲UI规范，指的就是项目的设计规范：主要链接什么颜色，辅助链接什么颜色，整站字体系列，以及色彩系统，品牌色系等。其实文库有设计规范，只是我之前对这个并不知情，为了确认一个效果还跑去问UE，结果UE就嫌烦了。<br>其次是细节标注的缺失，比如对页面元素的间距，字号等一些细节的标注。通常我们做完页面丢给UE，UE总会觉得这里字号不对啊，那里间距不对啊！可是我明明是对着psd量的啊，你又没给标注！UE就生气了，你要标注提前说嘛，怎么做这么烂了再丢过来！所以标注这事得一开始就当规范去实行。</p></li></ol><p>当然，沟通的问题，我觉得很多时候需要双方共同努力来解决的，我这里就从我的角度，反思我的过错，分析解决方案，谈谈我今后该做的事。</p><ol><li><p><strong>转变角色</strong>：上面说到了两种工作方式，且不说哪种效率更高，因为不同的部门，不同的产品是会有差异的。所以这里只提针对性的解决方案，首先是我要转变角色，适应开发流程，尽量做到，拿着明明白白的图开发，调完所有效果所有浏览器，一再确认百分百还原后，再给UE过效果。这是我之前没有做到的，拿了一份半完成状态，未接入数据的页面请UE确认，那UE哪知道是数据的问题，他一看页面跟设计出入太大，自然就不爽了。设计师产出的是一份设计稿，下一个阶段这份稿子将转变成实际的页面，我们作为工程师，认真对待每一份设计稿，既是对上游工作的尊重，也是对产品负责的表现。</p></li><li><p><strong>建立完整的设计规范</strong>。这是针对第二点需要做的事。UI规范，为什么这个很重要呢，是因为这可以在减少不必要的沟通成本，加快研发速度。有了规范不是终点，大家都认同规范的重要性，照着规范去做才是我们要达到的目的。这里我需要检讨下。<br>另外就是标注好必要的细节，这是为了页面设计细节在UI规范里找不到答案的情况下，工程师也能顺利的对着设计稿写样式，省去多余的取色，量间距的环节。而且这事也需要放到流程规范里去完善，如果有详尽的标注文件，交付开发，那最后出现偏差，就有证据说明是谁的问题了。</p></li></ol><p>##和QA沟通<br>在春苗测试的过程中，我们需要频繁的接受测试给的反馈。这次的项目我感觉总体来讲和QA同学合作比较愉快，但是也有些注意事项需要记录。</p><ol><li><p><strong>细读MRD</strong>。MRD即需求管理文档，这份文档会详细的描述产品的细节。通常来讲，对于一个前端页面，文档会对页面的不同区块分别展开描述，比如具体的交互效果描述，极端情况下（如没有数据，数据溢出）的展现。一般来说QA会根据这份文档比对各种情况的不同效果。<br>我在开发的过程中，犯的一个错误就是只看设计稿而没看MRD，设计稿往往只是确定页面在标准情况下的样子，而页面最终在不同用户手中会有各种不同的展现，举例来说，譬如没有登录，那么用户信息区块只显示足迹；如果没发表帖子，那么主页帖子页面也不能空空如也，如果是管理员，那么可能有额外的操作按钮。设计稿往往不能将这些情况全部考虑到，这就需要我们从MRD里找。这就避免测试阶段，QA发现各种我们没考虑到的问题。</p></li><li><p><strong>定好时间当面过bug</strong>。进入测试的环节中，QA会把bug记录到相关项目的需求平台中，比如我们使用icafe系统，这样很方便管理，修复好了的bug只要在系统中改一下状态，交给测试去回归。但是当bug增加到几十个甚至更多以后，可能就会有混乱的情况出现，这就需要定期定时间当面沟通了。<br>比如今天处理了10个bug，约定下午四点，大家当面过一遍。那么这一次沟通的重点是：一，核对处理的前10个bug，标注哪些是较难解决的，哪些是服务器端RD需要去修的，其余的状态改为“待测试”并由QA稍后回归；二，浏览待修复的后10个bug，哪些是无法复现的，哪些是有矛盾需要PM确认效果的，以及预估解决这些问题需要的时间。</p></li><li><p><strong>转换语言</strong>。这里指的是当QA跟你讲述，或向你询问一个问题可能的原因时，用尽量通俗的语言描述实现的环节是怎样的，最终应该是怎样的，而不该是怎样的。有的时候QA可能会武断的给一个bug的产生下结论，他看不到代码实现的复杂流程是怎样的，不知道这个bug和其他bug的相关性。当我们解释的时候，千万不能带有炫耀的想法拖长沟通的内容，简单明了为佳。<br>其实这一点讲的是和测试同学交流的一些技巧，我倒还是很乐意为测试同学解释问题的。记得有次QA跑来说他那边node服务挂了，我这边跑的好好的啊，查了半天代码也没问题啊。作为开发要尽责嘛，协助QA一起追查原因，最后定位到QA造数据时写的php代码的问题，导致传给node的数据格式不对了。这虽然是QA对代码的理解错误导致的，但找到原因前谁也不知道原因的，这就需要耐心沟通，乐意协助，逐步排除了。</p></li></ol><p>##和PM沟通<br>这次我参与的项目中和PM的沟通都挺顺畅的，可能是我参与进来较晚，没有完全参加前期的需求评审的缘故。所以对于这一点我体会并没有那么深，但组内同学有经历过一些问题，并且对此开过研讨会议，所以觉得有必要把会议记录贴上来。</p><pre>理想的H5&NA项目流程###一般项目需求评审测试排期###需求确认阶段需求评审  走心!!!需求反诉  多参与进去###设计排期阶段FE到底算什么承担一样的压力，为何不承担一样的权利?###研发阶段人总是习惯做自己最擅长的事情视觉  提前确定需求接口子项目  项目负责人(接口问题, 优先确定, 需求文档, checkList)###面对其他问题干扰  …###临上线阶段deadline问题提早暴露  上线通报和PM确定为什么大事都是最后出视觉走查放在最后吗?  上线前两三天完成项目排期较长的时候要及时up代码###上线后开放式提问  (不要问是非性问题，what性问题)承揽拭回答###问题反馈(check)</pre><p>觉得其中最有体会的是需求评审的时候需要“<strong>走心</strong>”，多参与进去，这是我一直做的不好的地方。当PM在解释需求的时候，我一言不发，就不可能真正理解需求的设计，在开发过程中就会遇到问题。只有多想，多发问，才能掌握具体的设计细节，PM也能评估出可行性。<br>还有就是<strong>临上线</strong>阶段，前面第一部分已经描述过，我在视觉走查阶段吃的亏。其实这个问题换个角度，放到更大的范围讨论，就是要把握deadline这个点。我们安排工作的时候，不要眼盯着deadline去做，而需要给自己定一个稍提前于deadline的时间点，这样就留下一个缓冲的时间段，便于让问题提早暴露，顺利解决而不拖延最后的上线。<br>上线后还有一点需要补充的是，我们要有<strong>责任意识</strong>。前端工程师不该只是把页面扔上线就觉得完成任务了，我们需要像运维工程师那样时时关注线上问题，及时处理和规避风险。这点扩展开来还有很多，就不属于和PM沟通的范畴了。目前就这么多啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##和UE沟通&lt;br&gt;在文库做两个项目过程中，都有被UE劈头痛批的经历，这是我在之前从未体验过的。我想了一下，出现这种沟通问题的原因在以下两个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;工作性质&lt;/strong&gt;：这个要拿我之前在广研的经历来比较了，由于之前在邮箱做的是重构工作，和设计师走的很近，像是相亲相爱的一家人，从来没出现过这种问题。而现在不同了，我们FE是属于研发联盟，这意味着，做事的方式和流程都会有很大的不同。&lt;br&gt;具体一点说：做重构，我们和设计师直接沟通，（几乎）随时沟通，我们甚至可以跟设计师提出自己对某个设计的看法。而做研发，有两个重要的不同点，一是&lt;strong&gt;过程&lt;/strong&gt;：开发之前，一份设计稿定稿并标注明了；开发之后上线之前，反馈UE走查确认效果；开发过程中，UE不会全程跟着你改。二是&lt;strong&gt;方式&lt;/strong&gt;：UE不直接跟工程师沟通，而由PM充当中间人的角色。开发时发现缺什么图了，跟PM说，PM找UE补；交互设计有矛盾了，UE找PM确认，PM确认无误再给研发。少数情况下，页面中细小的细节，UE可以和研发直接沟通。  &lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="experience" scheme="http://ianwith.github.io/tags/experience/"/>
    
      <category term="cooperation" scheme="http://ianwith.github.io/tags/cooperation/"/>
    
      <category term="chunmiao" scheme="http://ianwith.github.io/tags/chunmiao/"/>
    
  </entry>
  
  <entry>
    <title>春苗项目小结之模块化与组件化</title>
    <link href="http://ianwith.github.io/2015/02/16/chunmiao-summary-modularization/"/>
    <id>http://ianwith.github.io/2015/02/16/chunmiao-summary-modularization/</id>
    <published>2015-02-16T05:00:34.000Z</published>
    <updated>2020-06-26T16:50:18.873Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇想来整理总结一下春苗项目使用的前端框架及其模块化的思想。这次项目中我们使用了yog框架，这是一套基于kraken-js，并集成了fis静态资源管理等功能的node框架。</p><p>##框架简述</p><p>我写这篇文章，其实不是为了介绍框架，而是想写写框架使用的体会。加上我本身也只是知其表而不知其里，所以，想更深入地了解yog或是fis的同学，请移步文章末的参考资料。以春苗PC为例，首先我们来看一看目录结构：</p><a id="more"></a><img src="/img/chunmiao-summary-modularization/directory.png" alt="春苗PC目录结构" style="width:176px"><p>从上图中可以看到，站点根目录下划分了多个子目录：base目录是yog基础运行环境，其余目录都是对应各个子系统，也叫做<strong>模块</strong>，如group、home。每个模块都是一个完整的app，拥有client和server目录，client目录存放前端代码，server目录存放后端代码。当我们要运行group模块，只需将group app发布到与其同级的base目录下，启动node服务，便可在本地监听端口查看运行效果。</p><p>yog框架提供了前后端一体App的拆分能力，同时我们可以将多个业务子系统，部署到同一个yog项目中运行。给我们带来的好处就是，方便的模块化拆分，抽取通用代码，降低模块耦合。</p><p>##模块</p><p>我们进一步看子系统的部分，这里把项目拆分成了common，group，home，topic，user，wenku-api共六个模块。然而，这些模块又可以分成两类：<strong>common模块</strong>与<strong>业务模块</strong>。common模块即通用子系统，存放全站的通用代码。其他模块均为对应功能的业务模块。各业务模块仅对common模块有依赖，业务模块之间互不依赖。每个模块内部，都有大致相同的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─client                 # 前端代码</span><br><span class="line">│  ├─page                # 页面</span><br><span class="line">│  ├─static              # 非组件静态资源</span><br><span class="line">│  │  ├─css</span><br><span class="line">│  │  └─js</span><br><span class="line">│  └─widget              # 组件</span><br><span class="line">│     ├─tpl</span><br><span class="line">│     ├─css</span><br><span class="line">│     └─js</span><br><span class="line">├─server                 # 后端代码</span><br><span class="line">│  ├─action              # MVC中的路由动作，处理页面请求</span><br><span class="line">│  ├─model               # 存放一些数据层代码，如后端API请求</span><br><span class="line">│  ├─lib                 # 存放通用库</span><br><span class="line">│  └─router.js           # AppRouter路由，用于处理自动路由无法满足的需求</span><br><span class="line">└─fis-conf.js            # FIS编译配置</span><br></pre></td></tr></table></figure><p>模块内部结构可分成三部分，client，server，以及fis配置。一般的业务模块都完整的拥有如上述的目录结构。</p><p>首先来看client前端部分，又细分page，static，widget三个目录：page目录存放页面级模版文件，如layout布局文件等；static目录存放相应的页面级别的静态资源；widget目录存放组成页面的各个组件。</p><p>再看server后端部分，这里分为3个层次。router.js用来配置路由，将页面请求转发至action层。action层处理页面请求，解析请求参数，调用model层方法获取数据，然后渲染页面。model层即编写方法请求后端的数据接口。</p><p>了解了模块内部的目录规范，以及模块之间的关系，那么问题来了，我们在拆分组件的时候，代码应该如何存放呢？举一个栗子，我们在考虑一个组件该如何放置的时候，可以思考以下几个方面：一，如果是全站通用的组件，那么则放在common的widget目录下，如果仅限于本功能模块使用，那么则放在本模块下的widget目录；二，如果该组件是js驱动的组件，那么放在js目录下，相应的，其他类型的组件则放在其他目录下。</p><p>##组件</p><p>何为组件，我找到了fis设计之初对其的定义：</p><blockquote><p>组件（widget）：能独立提供交互的页面元素区域，俗称页面碎片。一般多个组件构成一个完整的页面。</p></blockquote><p>下面主要着眼前端代码的部分，让我们更深入一层，来到widget目录，这里就是我们存放组件的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─client</span><br><span class="line">    └─widget</span><br><span class="line">       ├─tpl                 # tpl组件</span><br><span class="line">       │  └─header</span><br><span class="line">       │     ├─header.tpl</span><br><span class="line">       │     └─header.less</span><br><span class="line">       ├─js                  # js组件</span><br><span class="line">       │  └─widget.js</span><br><span class="line">       └─css                 # css组件</span><br><span class="line">          └─button.less</span><br></pre></td></tr></table></figure><p>我们看到，所有的组件都可以按组织方式划分为三类。<strong>css组件</strong>最为简单，一般只涉及css文件，定义可复用的class等；<strong>js组件</strong>是使用js的方式初始化，一般会提供接口给页面调用；<strong>tpl组件</strong>则最复杂，它可以封装js组件和css组件，使用模版本身的方式调用，我们可以给tpl组件塞数据。</p><p>上文已经提到了widget存放的一些考虑因素。在实际的项目中，我经常会被一个问题困扰，就是“这个组件到底是否需要抽离呢？”。那么这里提出这样一个问题：如何考虑组件是否可以复用或是复用范围呢？有些通用组件较容易判断，如全站统一的页头页尾，那一定是放在common模块下。春苗项目是一个全新的项目，它处于设计初期的阶段。对于站点早期设计时就能明确区分的组件，我们可以直接存放在common。但有些无法确定复用需求的组件，我的经验是先由业务模块维护，当后期的设计需求改变，需要复用时，再进行重构，可以实施以下两种方案：手工copy代码；或抽离到通用模块中，并修改原来的调用路径。</p><p>另外还有一种情况是，对于早期设计时，有大于两个的业务模块共享一个通用组件，但随着设计的改变，其中一个业务模块无法再使用公共组件代码时，我们也可以有两种方式处理：重新为该模块单独编写组件；或利用传参判断的方式，在组件内部分别执行不同的代码。当然，具体采用哪一种方案，跟具体的设计需求是分不开的，我们同时要考虑到，代码松耦合，组件该尽量简单。</p><p>##分层设计</p><p>我们回过去看项目前端整个目录结构，不难发现这样的层次模型：从高到低依次为，<strong>站点</strong> &gt; <strong>子系统</strong> &gt; <strong>页面</strong> &gt; <strong>组件</strong>。组件是组成系统的基本单位，整个系统就像搭积木一样一层一层搭起来了。我整理了这张思维导图来帮助梳理思路：</p><img src="/img/chunmiao-summary-modularization/mindnode_structure.png" alt="前端分层示意" style="width:989px"><p>这张图的描述并不很完整，但从中我们可以大致窥见整个框架的分层思想。组件化就像一个链，从下至上串起整个系统。同时我们可以发现，除了纵向的分层，还存在一个横向层次：<strong>通用</strong>和<strong>非通用</strong>。在纵向四个层次上，每一层都有自己的“通用”形式。</p><img src="/img/chunmiao-summary-modularization/mindnode_levels.png" alt="分层下的通用" style="width:537px"><p>因此，我们可以对通用部分集中维护，定期升级和改进接口；对非通用部分，按需求开发，且不同功能模块互不影响。这种<strong>一个通用子系统+多个业务子系统</strong>的模块化思想，既将不同功能代码解耦，又解决了资源依赖的问题。在这个分层结构下，一个前端站点的三类基础代码：HTML，CSS，JS都得到了较好的组织，分级存放，分类维护。</p><p>这篇文章是一次学习总结，在写的过程中，深感一些术语理解和表述的吃力，如有错误还请指正～</p><p><em>参考资料：</em><br><a href="http://fis.baidu.com/" target="_blank" rel="noopener">fis</a><br><a href="https://github.com/fex-team/yog2" target="_blank" rel="noopener">yog2</a><br><a href="http://oak.baidu.com/fis-plus/document.html" target="_blank" rel="noopener">fis-plus</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇想来整理总结一下春苗项目使用的前端框架及其模块化的思想。这次项目中我们使用了yog框架，这是一套基于kraken-js，并集成了fis静态资源管理等功能的node框架。&lt;/p&gt;
&lt;p&gt;##框架简述&lt;/p&gt;
&lt;p&gt;我写这篇文章，其实不是为了介绍框架，而是想写写框架使用的体会。加上我本身也只是知其表而不知其里，所以，想更深入地了解yog或是fis的同学，请移步文章末的参考资料。以春苗PC为例，首先我们来看一看目录结构：&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="chunmiao" scheme="http://ianwith.github.io/tags/chunmiao/"/>
    
      <category term="fis" scheme="http://ianwith.github.io/tags/fis/"/>
    
      <category term="yog" scheme="http://ianwith.github.io/tags/yog/"/>
    
      <category term="modularization" scheme="http://ianwith.github.io/tags/modularization/"/>
    
  </entry>
  
  <entry>
    <title>春苗项目小结之一个列表的几种实现</title>
    <link href="http://ianwith.github.io/2015/01/14/chunmiao-summary-solutions-to-a-list/"/>
    <id>http://ianwith.github.io/2015/01/14/chunmiao-summary-solutions-to-a-list/</id>
    <published>2015-01-14T13:21:32.000Z</published>
    <updated>2020-06-26T16:50:18.873Z</updated>
    
    <content type="html"><![CDATA[<p>前一阵子花了很多时间做了<a href="http://chunmiao.baidu.com/" target="_blank" rel="noopener">春苗家长</a>，最近有时间来做个小结，首先讲的是在做个人主页左侧列表时的几种方法试验。实际的效果可以到春苗个人主页查看。下面我为了突出主要部分，把列表适当简化下，假定我们要实现这样的一个列表：<br><img src="/img/chunmiao-summary-solutions-to-a-list/list_result.png" alt="列表效果" style="width:150px;"><br>这个列表看着挺简单的，但做的时候发现为了找到最优解还是花了一番功夫的。我认为这里主要的矛盾在于分割线和hover背景的实现。下面就说说采用如下的同一套HTML结构，我的五种不同的方法尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cnt&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;first&quot;&gt;&lt;a href=&quot;#&quot;&gt;我的资料&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;我的帖子&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;我的收藏&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;账号设置&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>##方法一：</p><p>先说最容易最先想到的办法，使用伪元素做分隔线。</p><div data-height="268" data-theme-id="12285" data-slug-hash="QwQOML" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{  width: 150px;  height: 300px;  padding-top: 50px;  background-color: #505767;}ul{  padding: 0;  margin: 0;  list-style: none;}li{  text-align: center;  background-color: #505767;}li::after{  display: block;  content: &#x27;&#x27;;  height: 0;  margin: 0 10px;  border-top: 3px solid #575e6d;}li.first::before{  display: block;  content: &#x27;&#x27;;  height: 0;  margin: 0 10px;  border-top: 3px solid #575e6d;}a{  display: block;  height: 46px;  line-height: 46px;  color: #ffffff;  text-decoration: none;}a:hover{  background-color: #484f5e;}</code></pre></div><p>兼容性处理：</p><p>很明显，ie8以下不支持伪元素，ie8也只支持老的伪元素写法<code>:after</code>。欲达到全浏览器兼容的效果，可以额外开一个标签来实现分隔线。但是这样子缺点更明显，需要增加无语义的标签。因此尽量不用。</p><p>##方法二：</p><p>第二种办法，利用li的hover效果实现背景色的改变，a链接元素的border实现分割线。a元素使用负margin-bottom使边框超出父元素li，同时li设置一个和背景同色，与a边框等宽的border，给a的边框留出空间。</p><div data-height="268" data-theme-id="12285" data-slug-hash="ogEyKW" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{  width: 150px;  height: 300px;  padding-top: 50px;  background-color: #505767;}ul{  padding: 0;  margin: 0;  list-style: none;}li{  text-align: center;  background-color: #505767;  border-bottom: 3px solid #505767;  *height: 46px;}li.first{  border-top: 3px solid #505767;}li:hover{  background-color: #484f5e;}a{  display: block;  height: 46px;  line-height: 46px;  color: #ffffff;  text-decoration: none;  margin: 0 10px;  border-bottom: 3px solid #575e6d;  margin-bottom: -3px;}li.first a{  border-top: 3px solid #575e6d;  margin-top: -3px;}</code></pre></div><p>兼容性处理：</p><ol><li>ie6下，非a链接元素hover样式无效。可能的解决方案：目前css父元素选择器标准还没有浏览器去实现，要让ie6下非链接元素hover生效，只能尝试通过一些脚本实现。  </li><li>ie6、7下，该方案无法得到预期的目的，子元素a的负margin-bottom对父元素高度没有任何影响，所以下边框无法超出父元素li，需要给li加一个和a等高的高度<code>*height: 46px;</code>，如此一来，ie7表现正常，但是由于ie6下子元素是始终无法溢出父元素的（下面细说），a的下边框直接隐藏了，所以还需为ie6做特别优化。考虑到这里，我发现自己一开始的思路就有误，以至于越走越偏，这是一个不成熟的方案，于是有了方案三。</li></ol><p>##方法三：</p><p>方法二改良版，同样给li加hover。利用父元素li的margin-bottom撑开3px的高度，给a边框留出空间，a元素使用<code>position: relative</code>，li与a等高。</p><div data-height="268" data-theme-id="12285" data-slug-hash="xbYyNO" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{  width: 150px;  height: 300px;  padding-top: 50px;  background-color: #505767;}ul{  padding: 0;  margin: 0;  list-style: none;}li{  text-align: center;  background-color: #505767;  height: 46px;  margin-bottom: 3px;  _overflow: hidden;}li:hover{  background-color: #484f5e;}a{  position: relative;  display: block;  height: 46px;  line-height: 46px;  color: #ffffff;  text-decoration: none;  margin: 0 10px;  border-bottom: 3px solid #575e6d;}li.first a{  border-top: 3px solid #575e6d;  top: -3px;}</code></pre></div><p>兼容性处理：</p><p>同样，ie6下，子元素会撑大父元素，所以a元素的下边框也被包含在li内了，达不到我们的效果。给li的margin-bottom只会增加li之间的间距，所以ie6下看起来li之间间距变大了。解决方案：为了让ie6子元素能溢出父元素，使用<code>_overflow: hidden</code>，多谢子元素relative时，ie6对overflow的错误处理！</p><p>遗留的问题：</p><ol><li>方法二中的问题1依然存在。  </li><li>这两种方法，a链接并不充满整个列表宽度，两边缘不可点击。</li></ol><p>##方法四：</p><p>由于两个遗留的问题，上述两种方案并不优雅，我们换一种思路。用li元素来做边框，a链接元素加hover背景色。为了要让背景色充满整个宽度，a元素可以使用绝对定位。</p><div data-height="268" data-theme-id="12285" data-slug-hash="xbYMpb" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{  width: 150px;  height: 300px;  padding-top: 50px;  background-color: #505767;}ul{  padding: 0;  margin: 0;  list-style: none;}li{  position: relative;  text-align: center;  background-color: #505767;  margin-left: 10px;  margin-right: 10px;  height: 46px;  border-bottom: 3px solid #575e6d;  *vertical-align: middle;}li.first{  border-top: 3px solid #575e6d;}a{  position: absolute;  color: #ffffff;  text-decoration: none;  line-height: 46px;  left: -10px;  right: -10px;  _width: 150px;}a:hover{  background-color: #484f5e;}</code></pre></div><p>兼容性处理：</p><ol><li>这种定位方式的问题在于，ie6下，left和right不能同时生效，因此需要针对ie6加一个固定的宽度，才能使其充满。这就导致，在宽度不固定的情况下，这办法就变得不可用。</li><li>ie6、7下，li之间会产生大概4像素的间距，这个间距跟border值无关，不明原因，但经过排查，初步诊断为行高的问题，给li加上<code>*vertical-align: middle</code>得以解决。</li></ol><p>##方法五：</p><p>此方法和上述方法异曲同工，这里利用了元素宽度不固定时，左右margin负值能把宽度撑宽的特点，使得a元素左右扩展占满整个列表宽度。</p><div data-height="268" data-theme-id="12285" data-slug-hash="pvaGpQ" data-default-tab="css" data-user="ianwith" class="codepen"><pre><code>.cnt{  width: 150px;  height: 300px;  padding-top: 50px;  background-color: #505767;}ul{  padding: 0;  margin: 0;  list-style: none;}li{  text-align: center;  background-color: #505767;  border-bottom: 3px solid #575e6d;  margin-left: 10px;  margin-right: 10px;}li.first{  border-top: 3px solid #575e6d;}a{  display: block;  color: #ffffff;  text-decoration: none;  line-height: 46px;  margin-left: -10px;  margin-right: -10px;}a:hover{  background-color: #484f5e;}</code></pre></div><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>兼容性处理：</p><p>这个方法唯一的一个问题，就是ie6下，鼠标只有悬浮到文字上是才会出hover状态。但是这个hover态背景是充满整个宽度的，所以这个问题并不是很大。要解决的话，可以给a加宽度<code>_width: 150px;</code>来解决。</p><p>可见这个办法看似简单，得到的效果却很好，没有遗留问题，十分优雅！一开始怎么没想到呢～其实，如果基础足够扎实，应该一眼就能看出最好的解决方案。如果大家有更好的方法，一定要记得告诉我～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一阵子花了很多时间做了&lt;a href=&quot;http://chunmiao.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;春苗家长&lt;/a&gt;，最近有时间来做个小结，首先讲的是在做个人主页左侧列表时的几种方法试验。实际的效果可以到春苗个人主页查看。下面我为了突出主要部分，把列表适当简化下，假定我们要实现这样的一个列表：&lt;br&gt;&lt;img src=&quot;/img/chunmiao-summary-solutions-to-a-list/list_result.png&quot; alt=&quot;列表效果&quot; style=&quot;width:150px;&quot;&gt;&lt;br&gt;这个列表看着挺简单的，但做的时候发现为了找到最优解还是花了一番功夫的。我认为这里主要的矛盾在于分割线和hover背景的实现。下面就说说采用如下的同一套HTML结构，我的五种不同的方法尝试。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;cnt&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li class=&amp;quot;first&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;我的资料&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;我的帖子&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;我的收藏&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;账号设置&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="work" scheme="http://ianwith.github.io/categories/work/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="front end" scheme="http://ianwith.github.io/tags/front-end/"/>
    
      <category term="summary" scheme="http://ianwith.github.io/tags/summary/"/>
    
      <category term="chunmiao" scheme="http://ianwith.github.io/tags/chunmiao/"/>
    
      <category term="css" scheme="http://ianwith.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>开篇，在北京</title>
    <link href="http://ianwith.github.io/2014/11/17/first-post-in-beijing/"/>
    <id>http://ianwith.github.io/2014/11/17/first-post-in-beijing/</id>
    <published>2014-11-17T14:55:37.000Z</published>
    <updated>2020-06-26T16:50:18.874Z</updated>
    
    <content type="html"><![CDATA[<p>拖延症晚期的我终于也把博客弄起来了，想来这事已经拖了快半年了。本来想折腾下jekyll，后来还是觉得写东西要紧，就选了上手更简单的hexo，而且刚好这段时间也需要学习下nodejs。好了，既然博客的样子已经有了，优化的事以后再说吧=.=</p><p>好，开篇就来写写来北京一个多星期的感受吧。其实，写博客的主要目的，就是想<strong>记录</strong>，生活中有意思的事情、学习到的新知识。因为我本身最大的缺点就是不会主动去感悟，去思考。简单来说就是一个字，懒。所以希望能通过维护这个博客，让我每天有意识的过好每一天，不要昏昏沉沉的。同时也是锻炼自己表达能力的一种方式，希望以后博文的质量越来越高吧~</p><a id="more"></a><p>11月初刚来北京的时候，诸多不习惯的地方，这里的环境和广州还是很不一样的。首先一下子就从短袖加到厚大衣，刚下火车的时候差点把我冷死，而且天气很干燥，好的事情是托APEC福，雾霾倒是暂时没感觉。还有一个最大的感受是，北京的生活节奏好快，每天去坐地铁，自动扶梯上，大家都是用跑的！前几天还有新闻说，一女生挤地铁被门夹住身亡，好可怕。</p><p>来到这边以后，再也没有每天走路就能上下班这么爽了，现在上一次班，要走路，挤地铁，排队等班车，坐班车才能到公司，好累。。可能正是因为这样，大家都把工作和生活分得很开了，再也没有加班到11点的事情了。至于工作环境嘛，还是前厂好啊，可以用小资情调来形容，至少人文关怀做得比较到位。到现在也渐渐适应了这边的工作环境，但是我还是会怀念广州那边每天问早的前台，友好的保洁阿姨，还有食堂里超好吃的甜点。</p><p>工作方面刚来就有一些变数，被组长告知要离开这个部门去做产品了，本来我想唉真是不可思议，又要回到产品线了，后来又有了其他一些变化，最后我还是继续留下来，转去隔壁的fis组了，既然方向定了，要做的就是努力再努力了！总的来说在百度一个星期，新的同事都很nice。但整个团队是技术驱动的，身边都是厉害的工程师，工作方式和氛围肯定和之前截然不同！以前的团队属于Design Team，工作上是业务驱动的，一切围绕产品，因此除了技术上的要求，还会更多要求对业务的熟悉度，项目的推动能力，以及团队沟通能力。新的团队就没有pm天天催了，也因此自驱在这里就很重要。另外让我感受最深的是，在这里，会充分尊重每个人的想法，也能看到每个人的特长和优点，这是公司最好的一点了。</p><p>还有值得一提的是，周六的时候去看了Interstellar，把我喜欢的题材星空，时间，亲情，都融合在一起了，一句话评价：我想去再看一遍！</p><blockquote><p>Do not go gentle into that good night,<br>Old age should burn and rave at close of day;<br>Rage, rage against the dying of the light.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖延症晚期的我终于也把博客弄起来了，想来这事已经拖了快半年了。本来想折腾下jekyll，后来还是觉得写东西要紧，就选了上手更简单的hexo，而且刚好这段时间也需要学习下nodejs。好了，既然博客的样子已经有了，优化的事以后再说吧=.=&lt;/p&gt;
&lt;p&gt;好，开篇就来写写来北京一个多星期的感受吧。其实，写博客的主要目的，就是想&lt;strong&gt;记录&lt;/strong&gt;，生活中有意思的事情、学习到的新知识。因为我本身最大的缺点就是不会主动去感悟，去思考。简单来说就是一个字，懒。所以希望能通过维护这个博客，让我每天有意识的过好每一天，不要昏昏沉沉的。同时也是锻炼自己表达能力的一种方式，希望以后博文的质量越来越高吧~&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://ianwith.github.io/categories/life/"/>
    
    
      <category term="work" scheme="http://ianwith.github.io/tags/work/"/>
    
      <category term="life" scheme="http://ianwith.github.io/tags/life/"/>
    
  </entry>
  
</feed>
